<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Take Care And Be Well</title>
        <link>https://MoeSinon.github.io/blog/posts/</link>
        <description>Recent content in Posts on Take Care And Be Well</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <atom:link href="https://MoeSinon.github.io/blog/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title></title>
            <link>https://MoeSinon.github.io/blog/posts/mysql/</link>
            <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
            
            <guid>https://MoeSinon.github.io/blog/posts/mysql/</guid>
            <description>每日测验 MySQL中常用查询关键字及作用 针对多表查询有哪些查询方式，各自有什么特点 昨日内容回顾 查询主要关键字
select distinct 字段1,字段2,... from 表名 where 分组之前的筛选条件 group by 分组条件 having 分组之后的筛选条件 order by 排序字段1 asc,排序字段2 desc limit 5,5 where
where id&amp;gt;=3 and id&amp;lt;=6; where id between 3 and 6; where salary=18000 or salary=17000; where salary in (18000,17000); where salary not in (18000,17000); where salary*20 from emp; # 模糊匹配 like &amp;#34;&amp;#34;&amp;#34; % 任意多个字符 _ 任意单个字符 &amp;#34;&amp;#34;&amp;#34; where name like &amp;#39;%mode%&amp;#39;; where name like &amp;#39;____&amp;#39;; where char_length(name) = 4; # 针对null数据 判断的时候用is不要用= where post_comment is null; group by</description>
            <content type="html"><![CDATA[<h1 id="每日测验">每日测验</h1>
<ul>
<li>MySQL中常用查询关键字及作用</li>
<li>针对多表查询有哪些查询方式，各自有什么特点</li>
</ul>
<h1 id="昨日内容回顾">昨日内容回顾</h1>
<ul>
<li>
<p>查询主要关键字</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>select distinct 字段1,字段2,<span style="color:#f92672">...</span> <span style="color:#f92672">from</span> 表名
</span></span><span style="display:flex;"><span>	where 分组之前的筛选条件
</span></span><span style="display:flex;"><span>    group by  分组条件
</span></span><span style="display:flex;"><span>    having  分组之后的筛选条件
</span></span><span style="display:flex;"><span>    order by  排序字段1 asc,排序字段2 desc
</span></span><span style="display:flex;"><span>    limit <span style="color:#ae81ff">5</span>,<span style="color:#ae81ff">5</span>
</span></span></code></pre></div></li>
<li>
<p>where</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>where id<span style="color:#f92672">&gt;=</span><span style="color:#ae81ff">3</span> <span style="color:#f92672">and</span> id<span style="color:#f92672">&lt;=</span><span style="color:#ae81ff">6</span>;
</span></span><span style="display:flex;"><span>where id between <span style="color:#ae81ff">3</span> <span style="color:#f92672">and</span> <span style="color:#ae81ff">6</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>where salary<span style="color:#f92672">=</span><span style="color:#ae81ff">18000</span> <span style="color:#f92672">or</span> salary<span style="color:#f92672">=</span><span style="color:#ae81ff">17000</span>;
</span></span><span style="display:flex;"><span>where salary <span style="color:#f92672">in</span> (<span style="color:#ae81ff">18000</span>,<span style="color:#ae81ff">17000</span>);
</span></span><span style="display:flex;"><span>where salary <span style="color:#f92672">not</span> <span style="color:#f92672">in</span> (<span style="color:#ae81ff">18000</span>,<span style="color:#ae81ff">17000</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>where salary<span style="color:#f92672">*</span><span style="color:#ae81ff">20</span> <span style="color:#f92672">from</span> emp;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 模糊匹配 like</span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">%  任意多个字符
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">_  任意单个字符
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>where name like <span style="color:#e6db74">&#39;%mode%&#39;</span>;
</span></span><span style="display:flex;"><span>where name like <span style="color:#e6db74">&#39;____&#39;</span>;
</span></span><span style="display:flex;"><span>where char_length(name) <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 针对null数据 判断的时候用is不要用=</span>
</span></span><span style="display:flex;"><span>where post_comment <span style="color:#f92672">is</span> null;
</span></span></code></pre></div></li>
<li>
<p>group by</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># 分组的应用场景非常多 </span>
</span></span><span style="display:flex;"><span>	每个
</span></span><span style="display:flex;"><span>    平均
</span></span><span style="display:flex;"><span>    最大
</span></span><span style="display:flex;"><span>    最小
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">分组之后只能直接获取到分组的依据 其他字段都无法直接获取
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">set global sql_mode = &#39;only_full_group_by&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>select <span style="color:#f92672">*</span> <span style="color:#f92672">from</span> emp group by post;  报错
</span></span><span style="display:flex;"><span>select post <span style="color:#f92672">from</span> emp group by post;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># group_concat:帮助我们获取到分组之外的字段信息并且可以拼接多个字段</span>
</span></span><span style="display:flex;"><span>select post,group_concat(salary,<span style="color:#e6db74">&#39;:&#39;</span>,name) <span style="color:#f92672">from</span> emp;
</span></span><span style="display:flex;"><span><span style="color:#75715e"># concat:分组之前帮助我们获取字段信息并且可以拼接多个字段</span>
</span></span><span style="display:flex;"><span>select concat(name,<span style="color:#e6db74">&#39;??&#39;</span>) <span style="color:#f92672">from</span> emp;
</span></span><span style="display:flex;"><span><span style="color:#75715e"># concat_ws:如果多个字段之间的连接符号是相同的情况下 你可以直接使用concat_ws来完成</span>
</span></span><span style="display:flex;"><span>select concat_ws(<span style="color:#e6db74">&#39;:&#39;</span>,name,age,sex) <span style="color:#f92672">from</span> emp;
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">复习
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;?&#39;.join([111,222,333,444])  报错！
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># as语法</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ae81ff">1</span> 可以给展示字段起别名
</span></span><span style="display:flex;"><span>	<span style="color:#ae81ff">2</span> 可以给表起别名
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 聚合函数</span>
</span></span><span style="display:flex;"><span>	max
</span></span><span style="display:flex;"><span>    min
</span></span><span style="display:flex;"><span>    sum
</span></span><span style="display:flex;"><span>    count
</span></span><span style="display:flex;"><span>    avg
</span></span><span style="display:flex;"><span>  聚合函数必须在分组之后使用
</span></span></code></pre></div></li>
<li>
<p>having</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># 用法根where一模一样 只不过它是作用于分组之后的再次筛选</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">....</span>group by post having avg(salary) <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">30000</span>;
</span></span></code></pre></div></li>
<li>
<p>distinct</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># 数据必须是一模一样的情况下才能去重 </span>
</span></span><span style="display:flex;"><span>select distinct post <span style="color:#f92672">from</span> emp;
</span></span></code></pre></div></li>
<li>
<p>order by</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># 排序 默认是升序</span>
</span></span><span style="display:flex;"><span>order by salary;  <span style="color:#f92672">===</span>   order by salary asc;
</span></span><span style="display:flex;"><span>order by salary desc;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>order by salary asc,age desc;  <span style="color:#75715e"># 还支持多个字段备用比较</span>
</span></span></code></pre></div></li>
<li>
<p>limit</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">限制数据的展示条数    效果就是分页的效果
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>select <span style="color:#f92672">*</span> <span style="color:#f92672">from</span> emp limit <span style="color:#ae81ff">5</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>limit <span style="color:#ae81ff">5</span>;
</span></span><span style="display:flex;"><span>limit <span style="color:#ae81ff">5</span>,<span style="color:#ae81ff">5</span>  第一个参数是起始位置 第二个参数是条数
</span></span></code></pre></div></li>
<li>
<p>regexp</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">正则是一门独立的语言
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">在python中如果你想使用正则需要借助于re模块
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">	面试题
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">		1.re模块中常用的方法
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">			findall:分组优先展示
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">				^j.*(n|y)$
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">				不会展示所有正则表达式匹配到的内容
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">				而仅仅展示括号内正则表达式匹配到的内容
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">			match:从头匹配
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">			search:从整体匹配
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">		2.贪婪匹配与非贪婪匹配
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">			正则表达式默认都是贪婪匹配的
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">			将贪婪变成非贪婪只需要在正则表达式后面加?
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">			.*  贪婪
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">			.*? 非贪婪
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>select <span style="color:#f92672">*</span> <span style="color:#f92672">from</span> emp where name regexp <span style="color:#e6db74">&#39;^j.*n$&#39;</span>
</span></span></code></pre></div></li>
<li>
<p>多表查询</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># 联表操作</span>
</span></span><span style="display:flex;"><span>select <span style="color:#f92672">*</span> <span style="color:#f92672">from</span> emp,dep;  笛卡尔积
</span></span><span style="display:flex;"><span>	inner join
</span></span><span style="display:flex;"><span>    	只拼接两种表中都公有的部分
</span></span><span style="display:flex;"><span>        select <span style="color:#f92672">*</span> <span style="color:#f92672">from</span> emp inner join dep 
</span></span><span style="display:flex;"><span>        	on emp<span style="color:#f92672">.</span>dep_id <span style="color:#f92672">=</span> dep<span style="color:#f92672">.</span>id;
</span></span><span style="display:flex;"><span>            <span style="color:#75715e"># 要加上表的前缀 不然容易造成冲突 </span>
</span></span><span style="display:flex;"><span>    left join
</span></span><span style="display:flex;"><span>    	左表数据全部展示  没有对应的就用NULL补全
</span></span><span style="display:flex;"><span>    right join
</span></span><span style="display:flex;"><span>    	右表数据全部展示  没有对应的就用NULL补全	
</span></span><span style="display:flex;"><span>    union
</span></span><span style="display:flex;"><span>    	左右全书展示 没有对应的就用NULL补全	
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 子查询</span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">子查询就是我们平时解决问题的思路 分步处理
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">将一张表的查询结果当做另外一条sql语句的查询条件
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">(当做条件的时候 用括号括起来)
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">select * from emp where id in (select id from dep);
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;&#34;&#34;</span>
</span></span></code></pre></div></li>
<li>
<p><strong>总结</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># 书写sql语句的时候 select后面先用*占位 之后写完再改</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 在写较为复杂的sql语句的时候 不要想着一口气写完 写一点查一点看一点再写！！！(只要是涉及到数据查询相关的语法都不应该一次性写完 不太现实)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 在做多表查询的时候 联表操作和子查询可能会结合使用</span>
</span></span></code></pre></div></li>
</ul>
<h3 id="知识点补充">知识点补充</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># 查询平均年龄在25岁以上的部门名称</span>
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;&#34;&#34;只要是多表查询 就有两种思路    联表    子查询&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 联表操作</span>
</span></span><span style="display:flex;"><span>	<span style="color:#ae81ff">1</span> 先拿到部门和员工表 拼接之后的结果
</span></span><span style="display:flex;"><span>	<span style="color:#ae81ff">2</span> 分析语义 得出需要进行分组
</span></span><span style="display:flex;"><span>    select dep<span style="color:#f92672">.</span>name <span style="color:#f92672">from</span> emp inner join dep
</span></span><span style="display:flex;"><span>    	on emp<span style="color:#f92672">.</span>dep_id <span style="color:#f92672">=</span> dep<span style="color:#f92672">.</span>id
</span></span><span style="display:flex;"><span>        group by dep<span style="color:#f92672">.</span>name
</span></span><span style="display:flex;"><span>        having avg(age) <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">25</span>
</span></span><span style="display:flex;"><span>        ;
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;&#34;&#34;涉及到多表操作的时候 一定要加上表的前缀&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 子查询</span>
</span></span><span style="display:flex;"><span>	select name <span style="color:#f92672">from</span> dep where id <span style="color:#f92672">in</span>
</span></span><span style="display:flex;"><span>		(select dep_id <span style="color:#f92672">from</span> emp group by dep_id 
</span></span><span style="display:flex;"><span>    		having avg(age) <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">25</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 关键字exists(了解)</span>
</span></span><span style="display:flex;"><span>	只返回布尔值 <span style="color:#66d9ef">True</span> <span style="color:#66d9ef">False</span>
</span></span><span style="display:flex;"><span>    返回True的时候外层查询语句执行
</span></span><span style="display:flex;"><span>    返回False的时候外层查询语句不再执行
</span></span><span style="display:flex;"><span>	select <span style="color:#f92672">*</span> <span style="color:#f92672">from</span> emp where exists 
</span></span><span style="display:flex;"><span>    	(select id <span style="color:#f92672">from</span> dep where id<span style="color:#f92672">&gt;</span><span style="color:#ae81ff">3</span>);
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>   select <span style="color:#f92672">*</span> <span style="color:#f92672">from</span> emp where exists 
</span></span><span style="display:flex;"><span>    	(select id <span style="color:#f92672">from</span> dep where id<span style="color:#f92672">&gt;</span><span style="color:#ae81ff">300</span>);
</span></span></code></pre></div><h1 id="今日内容概要">今日内容概要</h1>
<ul>
<li>navicat可视化界面操作数据库</li>
<li>数据库查询题目讲解(多表操作)</li>
<li>python如何操作MySQL(pymysql模块)</li>
<li>sql注入问题</li>
<li>pymysql模块增删改查数据操作</li>
</ul>
<h1 id="今日内容详细">今日内容详细</h1>
<h3 id="navicat软件">Navicat软件</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">一开始学习python的时候 下载python解释器然后直接在终端书写
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">pycharm能够更加方便快捷的帮助你书写python代码
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">excel word pdf
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">我们在终端操作MySQL 也没有自动提示也无法保存等等 不方便开发
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">Navicat内部封装了所有的操作数据库的命令 
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">用户在使用它的时候只需要鼠标点点即可完成操作 无需书写sql语句
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;&#34;&#34;</span>
</span></span></code></pre></div><p><strong>安装</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>直接百度搜索 有破解版的也有非破解
</span></span><span style="display:flex;"><span>非破解的有试用期 你如果不嫌麻烦 你就用使用
</span></span><span style="display:flex;"><span>到期之后重新装再使用 或者破解一下也很简单
</span></span><span style="display:flex;"><span>https:<span style="color:#f92672">//</span>www<span style="color:#f92672">.</span>cr173<span style="color:#f92672">.</span>com<span style="color:#f92672">/</span>soft<span style="color:#f92672">/</span><span style="color:#ae81ff">126934.</span>html
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>下载完成后是一个压缩包 直接解压 然后点击安装 有提醒直接点击next即可
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>navicat能够充当多个数据库的客户端
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>navicat图形化界面有时候反应速度较慢 你可以选择刷新或者关闭当前窗口再次打开即可
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>当你有一些需求该软件无法满足的时候 你就自己动手写sql
</span></span></code></pre></div><h3 id="提示">提示</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">1 MySQL是不区分大小写的
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">	验证码忽略大小写
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">		内部统一转大写或者小写比较即可
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">			upper
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">			lower
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">2 MySQL建议所有的关键字写大写
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">3 MySQL中的注释 有两种
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">	--
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">	#
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">4 在navicat中如何快速的注释和解注释
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">	ctrl + ？  加注释
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">	ctrl + ？  基于上述操作再来一次就是解开注释
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">	如果你的navicat版本不一致还有可能是
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">	ctrl + shift + ？解开注释
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;&#34;&#34;</span>
</span></span></code></pre></div><h3 id="练习题">练习题</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">课下一定要把握上课将的这几道题全部自己独立的理解并写出来
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">在解决sql查询问题的时候 不要慌
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">一步一步慢慢来  最终能够东拼西凑出来就过关了！！！
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> <span style="color:#ae81ff">1</span><span style="color:#960050;background-color:#1e0010">、</span>查询所有的课程的名称以及对应的任课老师姓名
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> SELECT
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> 	course<span style="color:#f92672">.</span>cname,
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> 	teacher<span style="color:#f92672">.</span>tname 
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> FROM
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> 	course
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> 	INNER JOIN teacher ON course<span style="color:#f92672">.</span>teacher_id <span style="color:#f92672">=</span> teacher<span style="color:#f92672">.</span>tid;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> <span style="color:#ae81ff">4</span><span style="color:#960050;background-color:#1e0010">、</span>查询平均成绩大于八十分的同学的姓名和平均成绩
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> SELECT
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> 	student<span style="color:#f92672">.</span>sname,
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> 	t1<span style="color:#f92672">.</span>avg_num 
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> FROM
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> 	student
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> 	INNER JOIN (
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> 	SELECT
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> 		score<span style="color:#f92672">.</span>student_id,
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> 		avg( num ) AS avg_num 
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> 	FROM
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> 		score
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> 		INNER JOIN student ON score<span style="color:#f92672">.</span>student_id <span style="color:#f92672">=</span> student<span style="color:#f92672">.</span>sid 
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> 	GROUP BY
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> 		score<span style="color:#f92672">.</span>student_id 
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> 	HAVING
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> 		AVG( num ) <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">80</span> 
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> 	) AS t1 ON student<span style="color:#f92672">.</span>sid <span style="color:#f92672">=</span> t1<span style="color:#f92672">.</span>student_id;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> <span style="color:#ae81ff">7</span><span style="color:#960050;background-color:#1e0010">、</span> 查询没有报李平老师课的学生姓名
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 分步操作</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 1 先找到李平老师教授的课程id</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 2 再找所有报了李平老师课程的学生id</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 3 之后去学生表里面取反 就可以获取到没有报李平老师课程的学生姓名</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> SELECT
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> 	student<span style="color:#f92672">.</span>sname 
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> FROM
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> 	student 
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> WHERE
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> 	sid NOT IN (
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> 	SELECT DISTINCT
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> 		score<span style="color:#f92672">.</span>student_id 
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> 	FROM
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> 		score 
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> 	WHERE
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> 		score<span style="color:#f92672">.</span>course_id IN ( SELECT course<span style="color:#f92672">.</span>cid FROM teacher INNER JOIN course ON teacher<span style="color:#f92672">.</span>tid <span style="color:#f92672">=</span> course<span style="color:#f92672">.</span>teacher_id WHERE teacher<span style="color:#f92672">.</span>tname <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;李平老师&#39;</span> ) 
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> 	);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> <span style="color:#ae81ff">8</span><span style="color:#960050;background-color:#1e0010">、</span> 查询没有同时选修物理课程和体育课程的学生姓名
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span>     (只要选了一门的 选了两门和没有选的都不要)
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 1 先查物理和体育课程的id</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 2 再去获取所有选了物理和体育的学生数据</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 3 按照学生分组 利用聚合函数count筛选出只选了一门的学生id</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 4 依旧id获取学生姓名</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> SELECT
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> 	student<span style="color:#f92672">.</span>sname 
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> FROM
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> 	student 
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> WHERE
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> 	student<span style="color:#f92672">.</span>sid IN (
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> 	SELECT
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> 		score<span style="color:#f92672">.</span>student_id 
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> 	FROM
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> 		score 
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> 	WHERE
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> 		score<span style="color:#f92672">.</span>course_id IN ( SELECT course<span style="color:#f92672">.</span>cid FROM course WHERE course<span style="color:#f92672">.</span>cname IN ( <span style="color:#e6db74">&#39;物理&#39;</span>, <span style="color:#e6db74">&#39;体育&#39;</span> ) ) 
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> 	GROUP BY
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> 		score<span style="color:#f92672">.</span>student_id 
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> 	HAVING
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> 		COUNT( score<span style="color:#f92672">.</span>course_id ) <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span> 
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> 	);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">--</span> <span style="color:#ae81ff">9</span><span style="color:#960050;background-color:#1e0010">、</span> 查询挂科超过两门(包括两门)的学生姓名和班级
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 1 先筛选出所有分数小于60的数据</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 2 按照学生分组 对数据进行计数获取大于等于2的数据</span>
</span></span><span style="display:flex;"><span>SELECT
</span></span><span style="display:flex;"><span>	class<span style="color:#f92672">.</span>caption,
</span></span><span style="display:flex;"><span>	student<span style="color:#f92672">.</span>sname 
</span></span><span style="display:flex;"><span>FROM
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">class</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">INNER</span> JOIN student ON class<span style="color:#f92672">.</span>cid <span style="color:#f92672">=</span> student<span style="color:#f92672">.</span>class_id 
</span></span><span style="display:flex;"><span>WHERE
</span></span><span style="display:flex;"><span>	student<span style="color:#f92672">.</span>sid IN (
</span></span><span style="display:flex;"><span>	SELECT
</span></span><span style="display:flex;"><span>		score<span style="color:#f92672">.</span>student_id 
</span></span><span style="display:flex;"><span>	FROM
</span></span><span style="display:flex;"><span>		score 
</span></span><span style="display:flex;"><span>	WHERE
</span></span><span style="display:flex;"><span>		score<span style="color:#f92672">.</span>num <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">60</span> GROUP BY score<span style="color:#f92672">.</span>student_id HAVING COUNT( score<span style="color:#f92672">.</span>course_id ) <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">2</span> 
</span></span><span style="display:flex;"><span>	);
</span></span></code></pre></div><h3 id="pymysql模块">pymysql模块</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">支持python代码操作数据库MySQL
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>pip3 install pymysql
</span></span></code></pre></div><h3 id="sql注入">sql注入</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">利用一些语法的特性 书写一些特点的语句实现固定的语法
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">MySQL利用的是MySQL的注释语法
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">select * from user where name=&#39;jason&#39; -- jhsadklsajdkla&#39; and password=&#39;&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">select * from user where name=&#39;xxx&#39; or 1=1 -- sakjdkljakldjasl&#39; and password=&#39;&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>日常生活中很多软件在注册的时候都不能含有特殊符号
</span></span><span style="display:flex;"><span>因为怕你构造出特定的语句入侵数据库 不安全
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 敏感的数据不要自己做拼接 交给execute帮你拼接即可</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 结合数据库完成一个用户的登录功能？</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> pymysql
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>conn <span style="color:#f92672">=</span> pymysql<span style="color:#f92672">.</span>connect(
</span></span><span style="display:flex;"><span>    host <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;127.0.0.1&#39;</span>,
</span></span><span style="display:flex;"><span>    port <span style="color:#f92672">=</span> <span style="color:#ae81ff">3306</span>,
</span></span><span style="display:flex;"><span>    user <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;root&#39;</span>,
</span></span><span style="display:flex;"><span>    password <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;123456&#39;</span>,
</span></span><span style="display:flex;"><span>    database <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;day48&#39;</span>,
</span></span><span style="display:flex;"><span>    charset <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;utf8&#39;</span>  <span style="color:#75715e"># 编码千万不要加-</span>
</span></span><span style="display:flex;"><span>)  <span style="color:#75715e"># 链接数据库</span>
</span></span><span style="display:flex;"><span>cursor <span style="color:#f92672">=</span> conn<span style="color:#f92672">.</span>cursor(cursor<span style="color:#f92672">=</span>pymysql<span style="color:#f92672">.</span>cursors<span style="color:#f92672">.</span>DictCursor)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>username <span style="color:#f92672">=</span> input(<span style="color:#e6db74">&#39;&gt;&gt;&gt;:&#39;</span>)
</span></span><span style="display:flex;"><span>password <span style="color:#f92672">=</span> input(<span style="color:#e6db74">&#39;&gt;&gt;&gt;:&#39;</span>)
</span></span><span style="display:flex;"><span>sql <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;select * from user where name=</span><span style="color:#e6db74">%s</span><span style="color:#e6db74"> and password=</span><span style="color:#e6db74">%s</span><span style="color:#e6db74">&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 不要手动拼接数据 先用%s占位 之后将需要拼接的数据直接交给execute方法即可</span>
</span></span><span style="display:flex;"><span>print(sql)
</span></span><span style="display:flex;"><span>rows <span style="color:#f92672">=</span> cursor<span style="color:#f92672">.</span>execute(sql,(username,password))  <span style="color:#75715e"># 自动识别sql里面的%s用后面元组里面的数据替换</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> rows:
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#39;登录成功&#39;</span>)
</span></span><span style="display:flex;"><span>    print(cursor<span style="color:#f92672">.</span>fetchall())
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#39;用户名密码错误&#39;</span>)
</span></span></code></pre></div><p><strong>作业布置</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">1 navicat自己玩一玩
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">2 练习题一定要搞懂 照着我的思路一遍遍的看敲
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">3 熟悉pymysql的使用
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">4 sql注入产生的原因和解决方法 了解
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">5 思考:如何结合mysql实现用户的注册和登录功能？
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;&#34;&#34;</span>
</span></span></code></pre></div>]]></content>
        </item>
        
    </channel>
</rss>
