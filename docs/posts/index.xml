<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Take Care And Be Well</title>
        <link>https://MoeSinon.github.io/blog/posts/</link>
        <description>Recent content in Posts on Take Care And Be Well</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <atom:link href="https://MoeSinon.github.io/blog/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title></title>
            <link>https://MoeSinon.github.io/blog/posts/appendix/</link>
            <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
            
            <guid>https://MoeSinon.github.io/blog/posts/appendix/</guid>
            <description>let 我 = &amp;#39;...&amp;#39;; //允许 prompt(title, [default]);//可以指定初始值 两个非运算 !! 有时候用来将某个值转化为布尔类型 a ?? b 的结果是： 如果 a 是已定义的，则结果为 a， 如果 a 不是已定义的，则结果为 b。 case 2: case 3: alert( &amp;#39;2,3&amp;#39; ); 空值的 return 和 return undefined 等效： function getInfo(userObj){...}, 函数调用: getInfo({name: &amp;#39;&amp;#39;, id: &amp;#39;&amp;#39;, age: &amp;#39;&amp;#39;}) function sayHi() { // (1) 创建 alert( &amp;#34;Hello&amp;#34; ); } let func = sayHi; // (2) 复制 func(); // Hello // (3) 运行复制的值（正常运行）！ 函数表达式是在代码执行到达时被创建，并且仅从那一刻起可用。 在函数声明被定义之前，它就可以被调用。 sayHi(&amp;#34;John&amp;#34;); // Hello, John function sayHi(name) { alert( `Hello, ${name}` ); } let sum = (a, b) =&amp;gt; { // 花括号表示开始一个多行函数 let result = a + b; return result; // 如果我们使用了花括号，那么我们需要一个显式的 “return” }; alert( sum(1, 2) ); // 3 [1, 2].</description>
            <content type="html"><![CDATA[<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">我</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;...&#39;</span>; <span style="color:#75715e">//允许
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">prompt</span>(<span style="color:#a6e22e">title</span>, [<span style="color:#66d9ef">default</span>]);<span style="color:#75715e">//可以指定初始值
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">两个非运算</span> <span style="color:#f92672">!!</span> <span style="color:#a6e22e">有时候用来将某个值转化为布尔类型</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">a</span> <span style="color:#f92672">??</span> <span style="color:#a6e22e">b</span> <span style="color:#a6e22e">的结果是</span><span style="color:#960050;background-color:#1e0010">：</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">如果</span> <span style="color:#a6e22e">a</span> <span style="color:#a6e22e">是已定义的</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">则结果为</span> <span style="color:#a6e22e">a</span><span style="color:#960050;background-color:#1e0010">，</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">如果</span> <span style="color:#a6e22e">a</span> <span style="color:#a6e22e">不是已定义的</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">则结果为</span> <span style="color:#a6e22e">b</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span>  <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">2</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">case</span> <span style="color:#ae81ff">3</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">alert</span>( <span style="color:#e6db74">&#39;2,3&#39;</span> );
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">空值的</span> <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">和</span> <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">undefined</span> <span style="color:#a6e22e">等效</span><span style="color:#960050;background-color:#1e0010">：</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">getInfo</span>(<span style="color:#a6e22e">userObj</span>){...}, <span style="color:#a6e22e">函数调用</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">getInfo</span>({<span style="color:#a6e22e">name</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;&#39;</span>, <span style="color:#a6e22e">id</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;&#39;</span>, <span style="color:#a6e22e">age</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;&#39;</span>})
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">sayHi</span>() {   <span style="color:#75715e">// (1) 创建
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#a6e22e">alert</span>( <span style="color:#e6db74">&#34;Hello&#34;</span> );
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">func</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">sayHi</span>;    <span style="color:#75715e">// (2) 复制
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">func</span>(); <span style="color:#75715e">// Hello     // (3) 运行复制的值（正常运行）！
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">函数表达式是在代码执行到达时被创建</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">并且仅从那一刻起可用</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">在函数声明被定义之前</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">它就可以被调用</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">sayHi</span>(<span style="color:#e6db74">&#34;John&#34;</span>); <span style="color:#75715e">// Hello, John
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">sayHi</span>(<span style="color:#a6e22e">name</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">alert</span>( <span style="color:#e6db74">`Hello, </span><span style="color:#e6db74">${</span><span style="color:#a6e22e">name</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span> );
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">sum</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span>) =&gt; {  <span style="color:#75715e">// 花括号表示开始一个多行函数
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">result</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">a</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">b</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">result</span>; <span style="color:#75715e">// 如果我们使用了花括号，那么我们需要一个显式的 “return”
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>};
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">alert</span>( <span style="color:#a6e22e">sum</span>(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>) ); <span style="color:#75715e">// 3
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span>[<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>].<span style="color:#a6e22e">forEach</span>(<span style="color:#a6e22e">alert</span>)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">number</span> <span style="color:#960050;background-color:#1e0010">—</span> <span style="color:#a6e22e">可以是浮点数</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">也可以是整数</span><span style="color:#960050;background-color:#1e0010">，</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">bigint</span> <span style="color:#960050;background-color:#1e0010">—</span> <span style="color:#a6e22e">用于任意长度的整数</span><span style="color:#960050;background-color:#1e0010">，</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">string</span> <span style="color:#960050;background-color:#1e0010">—</span> <span style="color:#a6e22e">字符串类型</span><span style="color:#960050;background-color:#1e0010">，</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">boolean</span> <span style="color:#960050;background-color:#1e0010">—</span> <span style="color:#a6e22e">逻辑值</span><span style="color:#960050;background-color:#1e0010">：</span><span style="color:#66d9ef">true</span><span style="color:#f92672">/</span><span style="color:#66d9ef">false</span><span style="color:#960050;background-color:#1e0010">，</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">null</span> <span style="color:#960050;background-color:#1e0010">—</span> <span style="color:#a6e22e">具有单个值</span> <span style="color:#66d9ef">null</span> <span style="color:#a6e22e">的类型</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">表示</span><span style="color:#960050;background-color:#1e0010">“</span><span style="color:#a6e22e">空</span><span style="color:#960050;background-color:#1e0010">”</span><span style="color:#a6e22e">或</span><span style="color:#960050;background-color:#1e0010">“</span><span style="color:#a6e22e">不存在</span><span style="color:#960050;background-color:#1e0010">”，</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">undefined</span> <span style="color:#960050;background-color:#1e0010">—</span> <span style="color:#a6e22e">具有单个值</span> <span style="color:#66d9ef">undefined</span> <span style="color:#a6e22e">的类型</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">表示</span><span style="color:#960050;background-color:#1e0010">“</span><span style="color:#a6e22e">未分配</span><span style="color:#960050;background-color:#1e0010">（</span><span style="color:#a6e22e">未定义</span><span style="color:#960050;background-color:#1e0010">）”，</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">object</span> <span style="color:#a6e22e">和</span> <span style="color:#a6e22e">symbol</span> <span style="color:#960050;background-color:#1e0010">—</span> <span style="color:#a6e22e">对于复杂的数据结构和唯一标识符</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">我们目前还没学习这个类型</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">Mocha</span> <span style="color:#960050;background-color:#1e0010">——</span> <span style="color:#a6e22e">核心框架</span><span style="color:#960050;background-color:#1e0010">：</span><span style="color:#a6e22e">提供了包括通用型测试函数</span> <span style="color:#a6e22e">describe</span> <span style="color:#a6e22e">和</span> <span style="color:#a6e22e">it</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">以及用于运行测试的主函数</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">Chai</span> <span style="color:#960050;background-color:#1e0010">——</span> <span style="color:#a6e22e">提供很多断言</span><span style="color:#960050;background-color:#1e0010">（</span><span style="color:#a6e22e">assertion</span><span style="color:#960050;background-color:#1e0010">）</span><span style="color:#a6e22e">支持的库</span><span style="color:#960050;background-color:#1e0010">。</span><span style="color:#a6e22e">它提供了很多不同的断言</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">现在我们只需要用</span> <span style="color:#a6e22e">assert</span>.<span style="color:#a6e22e">equal</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">Sinon</span> <span style="color:#960050;background-color:#1e0010">——</span> <span style="color:#a6e22e">用于监视函数</span><span style="color:#960050;background-color:#1e0010">、</span><span style="color:#a6e22e">模拟内建函数和其他函数的库</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">我们在后面才会用到它</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;!</span><span style="color:#a6e22e">DOCTYPE</span> <span style="color:#a6e22e">html</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;</span><span style="color:#a6e22e">html</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;</span><span style="color:#a6e22e">head</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">&lt;!--</span> <span style="color:#a6e22e">add</span> <span style="color:#a6e22e">mocha</span> <span style="color:#a6e22e">css</span>, <span style="color:#a6e22e">to</span> <span style="color:#a6e22e">show</span> <span style="color:#a6e22e">results</span> <span style="color:#f92672">--&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">link</span> <span style="color:#a6e22e">rel</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;stylesheet&#34;</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://cdnjs.cloudflare.com/ajax/libs/mocha/3.2.0/mocha.css&#34;</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">&lt;!--</span> <span style="color:#a6e22e">add</span> <span style="color:#a6e22e">mocha</span> <span style="color:#a6e22e">framework</span> <span style="color:#a6e22e">code</span> <span style="color:#f92672">--&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">script</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://cdnjs.cloudflare.com/ajax/libs/mocha/3.2.0/mocha.js&#34;</span><span style="color:#f92672">&gt;&lt;</span><span style="color:#960050;background-color:#1e0010">/script&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">script</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">mocha</span>.<span style="color:#a6e22e">setup</span>(<span style="color:#e6db74">&#39;bdd&#39;</span>); <span style="color:#75715e">// minimal setup
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#f92672">&lt;</span><span style="color:#960050;background-color:#1e0010">/script&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">&lt;!--</span> <span style="color:#a6e22e">add</span> <span style="color:#a6e22e">chai</span> <span style="color:#f92672">--&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">script</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;https://cdnjs.cloudflare.com/ajax/libs/chai/3.5.0/chai.js&#34;</span><span style="color:#f92672">&gt;&lt;</span><span style="color:#960050;background-color:#1e0010">/script&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">script</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// chai has a lot of stuff, let&#39;s make assert global
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">assert</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">chai</span>.<span style="color:#a6e22e">assert</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&lt;</span><span style="color:#960050;background-color:#1e0010">/script&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;</span><span style="color:#960050;background-color:#1e0010">/head&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;</span><span style="color:#a6e22e">body</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">script</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">pow</span>(<span style="color:#a6e22e">x</span>, <span style="color:#a6e22e">n</span>) {
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">/* function code is to be written, empty now */</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&lt;</span><span style="color:#960050;background-color:#1e0010">/script&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">&lt;!--</span> <span style="color:#a6e22e">the</span> <span style="color:#a6e22e">script</span> <span style="color:#66d9ef">with</span> <span style="color:#a6e22e">tests</span> (<span style="color:#a6e22e">describe</span>, <span style="color:#a6e22e">it</span>...) <span style="color:#f92672">--&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">script</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;test.js&#34;</span><span style="color:#f92672">&gt;&lt;</span><span style="color:#960050;background-color:#1e0010">/script&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">&lt;!--</span> <span style="color:#a6e22e">the</span> <span style="color:#a6e22e">element</span> <span style="color:#66d9ef">with</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;mocha&#34;</span> <span style="color:#a6e22e">will</span> <span style="color:#a6e22e">contain</span> <span style="color:#a6e22e">test</span> <span style="color:#a6e22e">results</span> <span style="color:#f92672">--&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">div</span> <span style="color:#a6e22e">id</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;mocha&#34;</span><span style="color:#f92672">&gt;&lt;</span><span style="color:#960050;background-color:#1e0010">/div&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">&lt;!--</span> <span style="color:#a6e22e">run</span> <span style="color:#a6e22e">tests</span><span style="color:#f92672">!</span> <span style="color:#f92672">--&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&lt;</span><span style="color:#a6e22e">script</span><span style="color:#f92672">&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">mocha</span>.<span style="color:#a6e22e">run</span>();
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&lt;</span><span style="color:#960050;background-color:#1e0010">/script&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;</span><span style="color:#960050;background-color:#1e0010">/body&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;</span><span style="color:#960050;background-color:#1e0010">/html&gt;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">为了创建</span><span style="color:#960050;background-color:#1e0010">“</span><span style="color:#a6e22e">真正的拷贝</span><span style="color:#960050;background-color:#1e0010">”（</span><span style="color:#a6e22e">一个克隆</span><span style="color:#960050;background-color:#1e0010">），</span><span style="color:#a6e22e">我们可以使用</span> Object.<span style="color:#a6e22e">assign</span> <span style="color:#a6e22e">来做所谓的</span><span style="color:#960050;background-color:#1e0010">“</span><span style="color:#a6e22e">浅拷贝</span><span style="color:#960050;background-color:#1e0010">”（</span><span style="color:#a6e22e">嵌套的对象通过引用进行拷贝</span><span style="color:#960050;background-color:#1e0010">）</span><span style="color:#a6e22e">或者使用</span><span style="color:#960050;background-color:#1e0010">“</span><span style="color:#a6e22e">深拷贝</span><span style="color:#960050;background-color:#1e0010">”</span><span style="color:#a6e22e">函数</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">例如</span> <span style="color:#a6e22e">_</span>.<span style="color:#a6e22e">cloneDeep</span>(<span style="color:#a6e22e">obj</span>)<span style="color:#960050;background-color:#1e0010">。</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">存储在对象属性中的函数被称为</span><span style="color:#960050;background-color:#1e0010">“</span><span style="color:#a6e22e">方法</span><span style="color:#960050;background-color:#1e0010">”。</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">方法可以将对象引用为</span> <span style="color:#66d9ef">this</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#f92672">?</span>. <span style="color:#a6e22e">安全访问</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">?</span>.() <span style="color:#f92672">?</span>.[]<span style="color:#a6e22e">用于调用一个可能不存在的函数</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">alert</span>( <span style="color:#a6e22e">user1</span><span style="color:#f92672">?</span>.[<span style="color:#a6e22e">key</span>] ); <span style="color:#75715e">// John
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">userGuest</span>.<span style="color:#a6e22e">admin</span><span style="color:#f92672">?</span>.(); <span style="color:#75715e">// 啥都没发生（没有这样的方法）
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">Symbol</span>(<span style="color:#e6db74">&#34;id&#34;</span>) <span style="color:#75715e">//里面是一个标志
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">Symbol</span>.<span style="color:#66d9ef">for</span>(<span style="color:#e6db74">&#34;id&#34;</span>) <span style="color:#75715e">//全局的
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">globalSymbol</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Symbol</span>.<span style="color:#66d9ef">for</span>(<span style="color:#e6db74">&#34;name&#34;</span>);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">localSymbol</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Symbol</span>(<span style="color:#e6db74">&#34;name&#34;</span>);
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">alert</span>( <span style="color:#a6e22e">Symbol</span>.<span style="color:#a6e22e">keyFor</span>(<span style="color:#a6e22e">globalSymbol</span>) ); <span style="color:#75715e">// name，全局 symbol
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">alert</span>( <span style="color:#a6e22e">Symbol</span>.<span style="color:#a6e22e">keyFor</span>(<span style="color:#a6e22e">localSyvmbol</span>) ); <span style="color:#75715e">// undefined，非全局
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">如果需对象类型转换的话首先对象会执行</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">Symbol</span>.<span style="color:#a6e22e">toPrimitive</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">obj</span>[<span style="color:#a6e22e">Symbol</span>.<span style="color:#a6e22e">toPrimitive</span>] <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">hint</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// 这里是将此对象转换为原始值的代码
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#75715e">// 它必须返回一个原始值
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#75715e">// hint = &#34;string&#34;、&#34;number&#34; 或 &#34;default&#34; 中的一个
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">如果没有</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">找tostring方法</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">没有找valueOf</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span>Math.<span style="color:#a6e22e">floor</span><span style="color:#75715e">//向下舍入
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>Math.<span style="color:#a6e22e">ceil</span><span style="color:#75715e">//向上舍入
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>Math.<span style="color:#a6e22e">round</span><span style="color:#75715e">//向最近的整数舍入
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#f92672">~</span><span style="color:#a6e22e">n</span> <span style="color:#a6e22e">等于</span> <span style="color:#f92672">-</span>(<span style="color:#a6e22e">n</span><span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">换句话说</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">arr</span>.<span style="color:#a6e22e">at</span>(<span style="color:#a6e22e">i</span>)<span style="color:#960050;background-color:#1e0010">：</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">如果</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">0</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">则与</span> <span style="color:#a6e22e">arr</span>[<span style="color:#a6e22e">i</span>] <span style="color:#a6e22e">完全相同</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">对于</span> <span style="color:#a6e22e">i</span> <span style="color:#a6e22e">为负数的情况</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">它则从数组的尾部向前数</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">i</span> <span style="color:#66d9ef">in</span> <span style="color:#a6e22e">arr</span>) <span style="color:#960050;background-color:#1e0010">—</span> <span style="color:#a6e22e">永远不要用这个遍历数组</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span>..<span style="color:#66d9ef">in</span> <span style="color:#a6e22e">循环会遍历</span> <span style="color:#a6e22e">所有属性</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">不仅仅是这些数字属性</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">对于许多字母</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">最好使用</span> <span style="color:#a6e22e">str</span>.<span style="color:#a6e22e">localeCompare</span> <span style="color:#a6e22e">方法正确地对字母进行排序</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">str</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;test&#34;</span>;
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">alert</span>( <span style="color:#a6e22e">str</span>.<span style="color:#a6e22e">split</span>(<span style="color:#e6db74">&#39;&#39;</span>) ); <span style="color:#75715e">// t,e,s,t
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">range</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">from</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">1</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">to</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">5</span>
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 1. for..of 调用首先会调用这个：
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">range</span>[<span style="color:#a6e22e">Symbol</span>.<span style="color:#a6e22e">iterator</span>] <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span>() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// ……它返回迭代器对象（iterator object）：
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#75715e">// 2. 接下来，for..of 仅与下面的迭代器对象一起工作，要求它提供下一个值
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">return</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">current</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">from</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">last</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">to</span>,
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 3. next() 在 for..of 的每一轮循环迭代中被调用
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">next</span>() {
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">// 4. 它将会返回 {done:.., value :...} 格式的对象
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>      <span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">current</span> <span style="color:#f92672">&lt;=</span> <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">last</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> { <span style="color:#a6e22e">done</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">false</span>, <span style="color:#a6e22e">value</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">current</span><span style="color:#f92672">++</span> };
</span></span><span style="display:flex;"><span>      } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> { <span style="color:#a6e22e">done</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">true</span> };
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 现在它可以运行了！
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">num</span> <span style="color:#66d9ef">of</span> <span style="color:#a6e22e">range</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">alert</span>(<span style="color:#a6e22e">num</span>); <span style="color:#75715e">// 1, 然后是 2, 3, 4, 5
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">obj</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">name</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;John&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">age</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">30</span>
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">map</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Map</span>(Object.<span style="color:#a6e22e">entries</span>(<span style="color:#a6e22e">obj</span>));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">prices</span> <span style="color:#f92672">=</span> Object.<span style="color:#a6e22e">fromEntries</span>([
</span></span><span style="display:flex;"><span>  [<span style="color:#e6db74">&#39;banana&#39;</span>, <span style="color:#ae81ff">1</span>],
</span></span><span style="display:flex;"><span>  [<span style="color:#e6db74">&#39;orange&#39;</span>, <span style="color:#ae81ff">2</span>],
</span></span><span style="display:flex;"><span>  [<span style="color:#e6db74">&#39;meat&#39;</span>, <span style="color:#ae81ff">4</span>]
</span></span><span style="display:flex;"><span>]);
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 现在 prices = { banana: 1, orange: 2, meat: 4 }
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">alert</span>(<span style="color:#a6e22e">prices</span>.<span style="color:#a6e22e">orange</span>); <span style="color:#75715e">// 2
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">WeakMap</span> <span style="color:#a6e22e">和</span> <span style="color:#a6e22e">Map</span> <span style="color:#a6e22e">的第一个不同点就是</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">WeakMap</span> <span style="color:#a6e22e">的键必须是对象</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">不能是原始值</span><span style="color:#960050;background-color:#1e0010">：</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span>Object.<span style="color:#a6e22e">keys</span>(<span style="color:#a6e22e">obj</span>) <span style="color:#960050;background-color:#1e0010">——</span> <span style="color:#a6e22e">返回一个包含该对象所有的键的数组</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span>Object.<span style="color:#a6e22e">values</span>(<span style="color:#a6e22e">obj</span>) <span style="color:#960050;background-color:#1e0010">——</span> <span style="color:#a6e22e">返回一个包含该对象所有的值的数组</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span>Object.<span style="color:#a6e22e">entries</span>(<span style="color:#a6e22e">obj</span>) <span style="color:#960050;background-color:#1e0010">——</span> <span style="color:#a6e22e">返回一个包含该对象所有</span> [<span style="color:#a6e22e">key</span>, <span style="color:#a6e22e">value</span>] <span style="color:#a6e22e">键值对的数组</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">为了告诉</span> <span style="color:#a6e22e">JavaScript</span> <span style="color:#a6e22e">这不是一个代码块</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">我们可以把整个赋值表达式用括号</span> (...) <span style="color:#a6e22e">包起来</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">sum</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Function(<span style="color:#e6db74">&#39;a&#39;</span>, <span style="color:#e6db74">&#39;b&#39;</span>, <span style="color:#e6db74">&#39;return a + b&#39;</span>);
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">与普通函数的区别在于函数体和参数在一块</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">装饰器</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">这东西和中间件差不多</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">但有一点区别javascript是将参数作为上下文传递</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">一般将函数视为一等公民的都能实现</span>
</span></span></code></pre></div><pre tabindex="0"><code>属性标志和属性描述符
Object.defineProperties(user, {
  name: { value: &#34;John&#34;, writable: false },
  surname: { value: &#34;Smith&#34;, writable: false },
  // ...
});
</code></pre><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">User</span> {
</span></span><span style="display:flex;"><span>  [<span style="color:#e6db74">&#39;say&#39;</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;Hi&#39;</span>]() {<span style="color:#75715e">//可以拼出一个方法名
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">alert</span>(<span style="color:#e6db74">&#34;Hello&#34;</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">new</span> <span style="color:#a6e22e">User</span>().<span style="color:#a6e22e">sayHi</span>();
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Rabbit</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">Animal</span>
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title></title>
            <link>https://MoeSinon.github.io/blog/posts/javascript/</link>
            <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
            
            <guid>https://MoeSinon.github.io/blog/posts/javascript/</guid>
            <description>比较
search 和 indexOf match //同样可用于数组 substr //索引切片 数组为slice trim //删除字符串开头或结尾的尾随空格。 includes // concat //连接两个数组，也可以连接字符串，对然属于两个不同的对象 startsWith //ends repeat// parseInt（）// parseFloat（）// Number（）//都可以用 ? : //三元运算符 confirm //单击“确定”将生成 true 值，而单击“取消”按钮将生成 false 值 fill //数组填充 Array() //新建数组 isArray //检查数据类型是否为数组 join //连接数组元素 splice // foreach //arr.forEach(func) —— forEach 对每个数组元素都执行 func //通常用来遍历数组，不会返回一个新数组 //Map也可以使用 map //可以返回一个新数组，方法和foreach一样，接受callback函数，其实就是有返回值的普通函数 filter find//可以返回一个新数组，方法和foreach一样，接受callback函数，其实就是有返回值的普通函数,//返回满足条件的第一个元素find( (name) =&amp;gt; name &amp;gt; 1) reduce //const sum = numbers.reduce((acc, cur) =&amp;gt; acc + cur, 0) 0表示起始计算值 every some//检查所有元素在一个方面是否相似。它返回布尔值every((name) =&amp;gt; typeof name === &amp;#39;string&amp;#39;)，而some检查某个元素在一个方面是否相似 countries = [ [&amp;#39;Finland&amp;#39;, &amp;#39;Helsinki&amp;#39;], [&amp;#39;Sweden&amp;#39;, &amp;#39;Stockholm&amp;#39;], [&amp;#39;Norway&amp;#39;, &amp;#39;Oslo&amp;#39;], ] const map = new Map(countries) set //add,delete,has,clear map //set,get,has //解构 const countries = [[&amp;#39;Finland&amp;#39;, &amp;#39;Helsinki&amp;#39;], [&amp;#39;Sweden&amp;#39;, &amp;#39;Stockholm&amp;#39;], [&amp;#39;Norway&amp;#39;, &amp;#39;Oslo&amp;#39;]] for (const [country, city] of countries) { console.</description>
            <content type="html"><![CDATA[<p>比较</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">search</span> <span style="color:#a6e22e">和</span> <span style="color:#a6e22e">indexOf</span> <span style="color:#a6e22e">match</span> <span style="color:#75715e">//同样可用于数组
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">substr</span> <span style="color:#75715e">//索引切片 数组为slice
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">trim</span> <span style="color:#75715e">//删除字符串开头或结尾的尾随空格。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">includes</span> <span style="color:#75715e">//
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">concat</span> <span style="color:#75715e">//连接两个数组，也可以连接字符串，对然属于两个不同的对象
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">startsWith</span> <span style="color:#75715e">//ends
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">repeat</span><span style="color:#75715e">//
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span>parseInt<span style="color:#960050;background-color:#1e0010">（）</span><span style="color:#75715e">//
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>parseFloat<span style="color:#960050;background-color:#1e0010">（）</span><span style="color:#75715e">//
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>Number<span style="color:#960050;background-color:#1e0010">（）</span><span style="color:#75715e">//都可以用
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#f92672">?</span> <span style="color:#f92672">:</span> <span style="color:#75715e">//三元运算符
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">confirm</span> <span style="color:#75715e">//单击“确定”将生成 true 值，而单击“取消”按钮将生成 false 值
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">fill</span> <span style="color:#75715e">//数组填充
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>Array() <span style="color:#75715e">//新建数组
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">isArray</span> <span style="color:#75715e">//检查数据类型是否为数组
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">join</span> <span style="color:#75715e">//连接数组元素
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">splice</span> <span style="color:#75715e">//
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">foreach</span> <span style="color:#75715e">//arr.forEach(func) —— forEach 对每个数组元素都执行 func
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//通常用来遍历数组，不会返回一个新数组
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//Map也可以使用
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">map</span> <span style="color:#75715e">//可以返回一个新数组，方法和foreach一样，接受callback函数，其实就是有返回值的普通函数
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">filter</span> <span style="color:#a6e22e">find</span><span style="color:#75715e">//可以返回一个新数组，方法和foreach一样，接受callback函数，其实就是有返回值的普通函数,//返回满足条件的第一个元素find( (name) =&gt; name &gt; 1)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">reduce</span> <span style="color:#75715e">//const sum = numbers.reduce((acc, cur) =&gt; acc + cur, 0) 0表示起始计算值
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">every</span> <span style="color:#a6e22e">some</span><span style="color:#75715e">//检查所有元素在一个方面是否相似。它返回布尔值every((name) =&gt; typeof name === &#39;string&#39;)，而some检查某个元素在一个方面是否相似
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">countries</span> <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>  [<span style="color:#e6db74">&#39;Finland&#39;</span>, <span style="color:#e6db74">&#39;Helsinki&#39;</span>],
</span></span><span style="display:flex;"><span>  [<span style="color:#e6db74">&#39;Sweden&#39;</span>, <span style="color:#e6db74">&#39;Stockholm&#39;</span>],
</span></span><span style="display:flex;"><span>  [<span style="color:#e6db74">&#39;Norway&#39;</span>, <span style="color:#e6db74">&#39;Oslo&#39;</span>],
</span></span><span style="display:flex;"><span>]
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">map</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Map</span>(<span style="color:#a6e22e">countries</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">set</span> <span style="color:#75715e">//add,delete,has,clear
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">map</span> <span style="color:#75715e">//set,get,has
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#75715e">//解构
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">countries</span> <span style="color:#f92672">=</span> [[<span style="color:#e6db74">&#39;Finland&#39;</span>, <span style="color:#e6db74">&#39;Helsinki&#39;</span>], [<span style="color:#e6db74">&#39;Sweden&#39;</span>, <span style="color:#e6db74">&#39;Stockholm&#39;</span>], [<span style="color:#e6db74">&#39;Norway&#39;</span>, <span style="color:#e6db74">&#39;Oslo&#39;</span>]]
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">const</span> [<span style="color:#a6e22e">country</span>, <span style="color:#a6e22e">city</span>] <span style="color:#66d9ef">of</span> <span style="color:#a6e22e">countries</span>) {
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">country</span>, <span style="color:#a6e22e">city</span>)
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">//可以重命名
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">rectangle</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">width</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">20</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">height</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">10</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">area</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">200</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> { <span style="color:#a6e22e">width</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">w</span>, <span style="color:#a6e22e">height</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">h</span>, <span style="color:#a6e22e">area</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">perimeter</span><span style="color:#f92672">=</span> <span style="color:#ae81ff">60</span>} <span style="color:#f92672">=</span> <span style="color:#a6e22e">rectangle</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">w</span>, <span style="color:#a6e22e">h</span>, <span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">p</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">//可以用展开运算符做什么
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#ae81ff">1.</span>[<span style="color:#a6e22e">gem</span>, <span style="color:#a6e22e">fra</span>, , ...<span style="color:#a6e22e">nordicCountries</span>]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2.</span>[...<span style="color:#a6e22e">evens</span>, ...<span style="color:#a6e22e">odds</span>]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">3.</span>{...<span style="color:#a6e22e">user</span>}
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">4.</span>{...<span style="color:#a6e22e">user</span>, <span style="color:#a6e22e">title</span><span style="color:#f92672">:</span><span style="color:#e6db74">&#39;instructor&#39;</span>}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Student</span> <span style="color:#66d9ef">extends</span> <span style="color:#a6e22e">Person</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">saySomething</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;I am a child of the person class&#39;</span>)
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">localStorage</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">setItem</span><span style="color:#960050;background-color:#1e0010">（），</span><span style="color:#a6e22e">getItem</span><span style="color:#960050;background-color:#1e0010">（），</span><span style="color:#a6e22e">removeItem</span><span style="color:#960050;background-color:#1e0010">（），</span><span style="color:#a6e22e">clear</span><span style="color:#960050;background-color:#1e0010">（），</span><span style="color:#a6e22e">key</span><span style="color:#960050;background-color:#1e0010">（、）</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">getElementsByTagName</span><span style="color:#960050;background-color:#1e0010">（）</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">querySelector</span><span style="color:#960050;background-color:#1e0010">（）</span><span style="color:#75715e">//用途包含上面的方法
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">querySelectorAll</span> <span style="color:#75715e">// 
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">setAttribute</span><span style="color:#960050;background-color:#1e0010">（）</span><span style="color:#75715e">//可以赋值const titles = document.querySelectorAll(&#39;h1&#39;)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//titles[3].setAttribute(&#39;class&#39;, &#39;title&#39;)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//titles[3].setAttribute(&#39;id&#39;, &#39;fourth-title&#39;)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">titles</span>[<span style="color:#ae81ff">3</span>].<span style="color:#a6e22e">classList</span>.<span style="color:#a6e22e">add</span>(<span style="color:#e6db74">&#39;title&#39;</span>, <span style="color:#e6db74">&#39;header-title&#39;</span>) <span style="color:#75715e">//添加类
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">titles</span>[<span style="color:#ae81ff">3</span>].<span style="color:#a6e22e">classList</span>.<span style="color:#a6e22e">remove</span>(<span style="color:#e6db74">&#39;title&#39;</span>, <span style="color:#e6db74">&#39;header-title&#39;</span>) <span style="color:#75715e">//删除类
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">titles</span>[<span style="color:#ae81ff">3</span>].<span style="color:#a6e22e">textContent</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Fourth Title&#39;</span> <span style="color:#75715e">//添加文本
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>document.<span style="color:#a6e22e">createElement</span>(<span style="color:#e6db74">&#39;h1&#39;</span>)
</span></span><span style="display:flex;"><span>document.<span style="color:#a6e22e">body</span>.<span style="color:#a6e22e">appendChild</span>(<span style="color:#a6e22e">title</span>)<span style="color:#f92672">/</span><span style="color:#a6e22e">removeChild</span>(<span style="color:#a6e22e">list</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">selectedElement</span>.<span style="color:#a6e22e">addEventListener</span>(<span style="color:#e6db74">&#39;eventlistner&#39;</span>, <span style="color:#a6e22e">e</span> =&gt; {
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// 事件侦听
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>})
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">button</span>.<span style="color:#a6e22e">addEventListener</span> <span style="color:#75715e">//点击
</span></span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title></title>
            <link>https://MoeSinon.github.io/blog/posts/javascripthigheruse/</link>
            <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
            
            <guid>https://MoeSinon.github.io/blog/posts/javascripthigheruse/</guid>
            <description>JavaScript对象属性访问
writable //如果为 true，则值可以被修改，否则它是只可读的。 enumerable //如果为 true，则会被在循环中列出，否则不会被列出。 configurable //如果为 true，则此属性可以被删除，以上特性也可以被修改，否则不可以。 Object.getOwnPropertyDescriptor(obj, propertyName); //一次获取所有属性描述符,一起可以用作克隆对象的“标志感知”方式 Object.defineProperties({},Object.getOwnPropertyDescriptors(obj)); Object.defineProperty(obj, propertyName, descriptor) //允许一次定义多个属性 Object.defineProperties(obj, { prop1: descriptor1, prop2: descriptor2 // ... }); let user = {}; Object.defineProperty(user, &amp;#34;name&amp;#34;, { value: &amp;#34;John&amp;#34; }); let descriptor = Object.getOwnPropertyDescriptor(user, &amp;#39;name&amp;#39;); alert( JSON.stringify(descriptor, null, 2 ) ); Object.defineProperty(user, &amp;#34;name&amp;#34;, { writable: false }); user.name = &amp;#34;Pete&amp;#34;; //通过更改 writable 标志来把 user.name 设置为只读（user.name 不能被重新赋值 /* { &amp;#34;value&amp;#34;: &amp;#34;John&amp;#34;, &amp;#34;writable&amp;#34;: false, &amp;#34;enumerable&amp;#34;: false, &amp;#34;configurable&amp;#34;: false } */ 原型</description>
            <content type="html"><![CDATA[<p>JavaScript对象属性访问</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">writable</span> <span style="color:#75715e">//如果为 true，则值可以被修改，否则它是只可读的。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">enumerable</span> <span style="color:#75715e">//如果为 true，则会被在循环中列出，否则不会被列出。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">configurable</span> <span style="color:#75715e">//如果为 true，则此属性可以被删除，以上特性也可以被修改，否则不可以。
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span>Object.<span style="color:#a6e22e">getOwnPropertyDescriptor</span>(<span style="color:#a6e22e">obj</span>, <span style="color:#a6e22e">propertyName</span>);
</span></span><span style="display:flex;"><span><span style="color:#75715e">//一次获取所有属性描述符,一起可以用作克隆对象的“标志感知”方式
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>Object.<span style="color:#a6e22e">defineProperties</span>({},Object.<span style="color:#a6e22e">getOwnPropertyDescriptors</span>(<span style="color:#a6e22e">obj</span>));
</span></span><span style="display:flex;"><span>Object.<span style="color:#a6e22e">defineProperty</span>(<span style="color:#a6e22e">obj</span>, <span style="color:#a6e22e">propertyName</span>, <span style="color:#a6e22e">descriptor</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">//允许一次定义多个属性
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>Object.<span style="color:#a6e22e">defineProperties</span>(<span style="color:#a6e22e">obj</span>, {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">prop1</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">descriptor1</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">prop2</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">descriptor2</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// ...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>});
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">user</span> <span style="color:#f92672">=</span> {};
</span></span><span style="display:flex;"><span>Object.<span style="color:#a6e22e">defineProperty</span>(<span style="color:#a6e22e">user</span>, <span style="color:#e6db74">&#34;name&#34;</span>, {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">value</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;John&#34;</span>
</span></span><span style="display:flex;"><span>});
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">descriptor</span> <span style="color:#f92672">=</span> Object.<span style="color:#a6e22e">getOwnPropertyDescriptor</span>(<span style="color:#a6e22e">user</span>, <span style="color:#e6db74">&#39;name&#39;</span>);
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">alert</span>( <span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">stringify</span>(<span style="color:#a6e22e">descriptor</span>, <span style="color:#66d9ef">null</span>, <span style="color:#ae81ff">2</span> ) );
</span></span><span style="display:flex;"><span>Object.<span style="color:#a6e22e">defineProperty</span>(<span style="color:#a6e22e">user</span>, <span style="color:#e6db74">&#34;name&#34;</span>, {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">writable</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>});
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">user</span>.<span style="color:#a6e22e">name</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Pete&#34;</span>; <span style="color:#75715e">//通过更改 writable 标志来把 user.name 设置为只读（user.name 不能被重新赋值
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#75715e">/*
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">{
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">  &#34;value&#34;: &#34;John&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">  &#34;writable&#34;: false,
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">  &#34;enumerable&#34;: false,
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">  &#34;configurable&#34;: false
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">}
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> */</span>
</span></span></code></pre></div><p>原型</p>
<p>对象有一个特殊的隐藏属性 <code>[[Prototype]]</code>只能有一个 <code>[[Prototype]]</code>。一个对象不能从其他两个对象获得继承。</p>
<p><strong>proto</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">animal</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">eats</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">rabbit</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">jumps</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">rabbit</span>.<span style="color:#a6e22e">__proto__</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">animal</span>; <span style="color:#75715e">// 设置 rabbit.[[Prototype]] = animal
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 现在这两个属性我们都能在 rabbit 中找到：
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">alert</span>( <span style="color:#a6e22e">rabbit</span>.<span style="color:#a6e22e">eats</span> ); <span style="color:#75715e">// true (**)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">alert</span>( <span style="color:#a6e22e">rabbit</span>.<span style="color:#a6e22e">jumps</span> ); <span style="color:#75715e">// true
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">delete</span> <span style="color:#a6e22e">rabbit</span>.<span style="color:#a6e22e">jumps</span>; <span style="color:#75715e">//删除对象属性
</span></span></span></code></pre></div><p>内建方法 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty">obj.hasOwnProperty(key)</a>：如果 <code>obj</code> 具有自己的（非继承的）名为 <code>key</code> 的属性，则返回 <code>true</code>。</p>
<ol>
<li>类总是使用 <code>use strict</code>。 在类构造中的所有代码都将自动进入严格模式。</li>
</ol>
<p>错误处理</p>
<p>try&hellip;catch</p>
<p>如果在“计划的（scheduled）”代码中发生异常，例如在 <code>setTimeout</code> 中，则 <code>try...catch</code> 不会捕获到异常</p>
<p>除非：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">setTimeout</span>(<span style="color:#66d9ef">function</span>() {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">try</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">noSuchVariable</span>; <span style="color:#75715e">// try...catch 处理 error 了！
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  } <span style="color:#66d9ef">catch</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">alert</span>( <span style="color:#e6db74">&#34;error is caught here!&#34;</span> );
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}, <span style="color:#ae81ff">1000</span>);
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">try</span> {
</span></span><span style="display:flex;"><span>   ... <span style="color:#a6e22e">尝试执行的代码</span> ...
</span></span><span style="display:flex;"><span>} <span style="color:#66d9ef">catch</span> (<span style="color:#a6e22e">err</span>) {
</span></span><span style="display:flex;"><span>   ... <span style="color:#a6e22e">处理</span> <span style="color:#a6e22e">error</span> ...
</span></span><span style="display:flex;"><span>} <span style="color:#66d9ef">finally</span> {
</span></span><span style="display:flex;"><span>   ... <span style="color:#a6e22e">总是会执行的代码</span> ...
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>回调</p>
]]></content>
        </item>
        
        <item>
            <title></title>
            <link>https://MoeSinon.github.io/blog/posts/ow/</link>
            <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
            
            <guid>https://MoeSinon.github.io/blog/posts/ow/</guid>
            <description>文档对象模型（Document Object Model），简称 DOM
浏览器对象模型（Browser Object Model），简称 BOM，表示由浏览器（主机环境）提供的用于处理文档（document）之外的所有内容的其他对象。
可以使用 for..of 对集合进行迭代。不要尝试使用 for..in 来迭代集合。for..in 循环遍历的是所有可枚举的（enumerable）属性。集合还有一些“额外的”很少被用到的属性，通常这些属性也是我们不期望得到的：
脚本是“异步”调用的
let promise = new Promise(function(resolve, reject) { // executor（生产者代码，“歌手”） }); resolve(value) —— 如果任务成功完成并带有结果 value。 reject(error) —— 如果出现了 error，error 即为 error 对象。 promise函数对象里有三个属性.then.catch和.finally
window.addEventListener(&amp;#39;unhandledrejection&amp;#39;, function(event) { // 这个事件对象有两个特殊的属性： alert(event.promise); // [object Promise] - 生成该全局 error 的 promise alert(event.reason); // Error: Whoops! - 未处理的 error 对象 }); new Promise(function() { throw new Error(&amp;#34;Whoops!&amp;#34;); }); // 没有用来处理 error 的 catch Promise.</description>
            <content type="html"><![CDATA[<p>文档对象模型（Document Object Model），简称 DOM</p>
<p>浏览器对象模型（Browser Object Model），简称 BOM，表示由浏览器（主机环境）提供的用于处理文档（document）之外的所有内容的其他对象。</p>
<p>可以使用 <code>for..of</code> 对集合进行迭代。不要尝试使用 <code>for..in</code> 来迭代集合。<code>for..in</code> 循环遍历的是所有可枚举的（enumerable）属性。集合还有一些“额外的”很少被用到的属性，通常这些属性也是我们不期望得到的：</p>
<p>脚本是“异步”调用的</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">promise</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Promise(<span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">resolve</span>, <span style="color:#a6e22e">reject</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// executor（生产者代码，“歌手”）
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>});
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">resolve</span>(<span style="color:#a6e22e">value</span>) <span style="color:#960050;background-color:#1e0010">——</span> <span style="color:#a6e22e">如果任务成功完成并带有结果</span> <span style="color:#a6e22e">value</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">reject</span>(<span style="color:#a6e22e">error</span>) <span style="color:#960050;background-color:#1e0010">——</span> <span style="color:#a6e22e">如果出现了</span> <span style="color:#a6e22e">error</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">error</span> <span style="color:#a6e22e">即为</span> <span style="color:#a6e22e">error</span> <span style="color:#a6e22e">对象</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span></code></pre></div><p>promise函数对象里有三个属性.then.catch<code>和</code>.finally</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span>window.<span style="color:#a6e22e">addEventListener</span>(<span style="color:#e6db74">&#39;unhandledrejection&#39;</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">event</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// 这个事件对象有两个特殊的属性：
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#a6e22e">alert</span>(<span style="color:#a6e22e">event</span>.<span style="color:#a6e22e">promise</span>); <span style="color:#75715e">// [object Promise] - 生成该全局 error 的 promise
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#a6e22e">alert</span>(<span style="color:#a6e22e">event</span>.<span style="color:#a6e22e">reason</span>); <span style="color:#75715e">// Error: Whoops! - 未处理的 error 对象
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>});
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">new</span> Promise(<span style="color:#66d9ef">function</span>() {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> Error(<span style="color:#e6db74">&#34;Whoops!&#34;</span>);
</span></span><span style="display:flex;"><span>}); <span style="color:#75715e">// 没有用来处理 error 的 catch
</span></span></span></code></pre></div><p>Promise.all()并行执行多个 promise，并等待所有 promise 都准备就绪。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">urls</span> <span style="color:#f92672">=</span> [
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;https://api.github.com/users/iliakan&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;https://api.github.com/users/remy&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#e6db74">&#39;https://api.github.com/users/jeresig&#39;</span>
</span></span><span style="display:flex;"><span>];
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 将每个 url 映射（map）到 fetch 的 promise 中
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">requests</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">urls</span>.<span style="color:#a6e22e">map</span>(<span style="color:#a6e22e">url</span> =&gt; <span style="color:#a6e22e">fetch</span>(<span style="color:#a6e22e">url</span>));
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Promise.all 等待所有任务都 resolved
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>Promise.<span style="color:#a6e22e">all</span>(<span style="color:#a6e22e">requests</span>)
</span></span><span style="display:flex;"><span>  .<span style="color:#a6e22e">then</span>(<span style="color:#a6e22e">responses</span> =&gt; <span style="color:#a6e22e">responses</span>.<span style="color:#a6e22e">forEach</span>(
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">response</span> =&gt; <span style="color:#a6e22e">alert</span>(<span style="color:#e6db74">`</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">response</span>.<span style="color:#a6e22e">url</span><span style="color:#e6db74">}</span><span style="color:#e6db74">: </span><span style="color:#e6db74">${</span><span style="color:#a6e22e">response</span>.<span style="color:#a6e22e">status</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>)
</span></span><span style="display:flex;"><span>  ));
</span></span></code></pre></div><p><strong>如果任意一个 promise 被 reject，由 <code>Promise.all</code> 返回的 promise 就会立即 reject，并且带有的就是这个 error。</strong></p>
<p>promisification 仅适用于调用一次回调的函数进一步的调用将被忽略</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#75715e">// promisify(f, true) 来获取结果数组
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">promisify</span>(<span style="color:#a6e22e">f</span>, <span style="color:#a6e22e">manyArgs</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">function</span> (...<span style="color:#a6e22e">args</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> Promise((<span style="color:#a6e22e">resolve</span>, <span style="color:#a6e22e">reject</span>) =&gt; {
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">callback</span>(<span style="color:#a6e22e">err</span>, ...<span style="color:#a6e22e">results</span>) { <span style="color:#75715e">// 我们自定义的 f 的回调
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">err</span>) {
</span></span><span style="display:flex;"><span>          <span style="color:#a6e22e">reject</span>(<span style="color:#a6e22e">err</span>);
</span></span><span style="display:flex;"><span>        } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>          <span style="color:#75715e">// 如果 manyArgs 被指定，则使用所有回调的结果 resolve
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>          <span style="color:#a6e22e">resolve</span>(<span style="color:#a6e22e">manyArgs</span> <span style="color:#f92672">?</span> <span style="color:#a6e22e">results</span> <span style="color:#f92672">:</span> <span style="color:#a6e22e">results</span>[<span style="color:#ae81ff">0</span>]);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">args</span>.<span style="color:#a6e22e">push</span>(<span style="color:#a6e22e">callback</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">f</span>.<span style="color:#a6e22e">call</span>(<span style="color:#66d9ef">this</span>, ...<span style="color:#a6e22e">args</span>);
</span></span><span style="display:flex;"><span>    });
</span></span><span style="display:flex;"><span>  };
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 用法：
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">f</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">promisify</span>(<span style="color:#a6e22e">f</span>, <span style="color:#66d9ef">true</span>);
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">f</span>(...).<span style="color:#a6e22e">then</span>(<span style="color:#a6e22e">arrayOfResults</span> =&gt; ..., <span style="color:#a6e22e">err</span> =&gt; ...);
</span></span></code></pre></div><p>当一个 promise 准备就绪时，它的 <code>.then/catch/finally</code> 处理程序（handler）就会被放入队列中：但是它们不会立即被执行。当 JavaScript 引擎执行完当前的代码，它会从队列中获取任务并执行它。</p>
<p><code>async</code> 确保了函数返回一个 promise，也会将非 promise 的值包装进去。</p>
<p><strong><code>async/await</code> 可以和 <code>Promise.all</code> 一起使用</strong></p>
<p>当我们需要同时等待多个 promise 时，我们可以用 <code>Promise.all</code> 把它们包装起来，然后使用 <code>await</code>：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#75715e">// 等待结果数组
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">results</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">await</span> Promise.<span style="color:#a6e22e">all</span>([
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">fetch</span>(<span style="color:#a6e22e">url1</span>),
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">fetch</span>(<span style="color:#a6e22e">url2</span>),
</span></span><span style="display:flex;"><span>  ...
</span></span><span style="display:flex;"><span>]);
</span></span></code></pre></div><p>当你看到 <code>next()</code> 方法，或许你已经猜到了 generator 是 <a href="https://zh.javascript.info/iterable">可迭代（iterable）</a>的。（译注：<code>next()</code> 是 iterator 的必要方法）</p>
<p>我们可以使用 <code>for..of</code> 循环遍历它所有的值：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">function</span><span style="color:#f92672">*</span> <span style="color:#a6e22e">generateSequence</span>() {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">yield</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">yield</span> <span style="color:#ae81ff">2</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">yield</span> <span style="color:#ae81ff">3</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">generator</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">generateSequence</span>();
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span>(<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">value</span> <span style="color:#66d9ef">of</span> <span style="color:#a6e22e">generator</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">alert</span>(<span style="color:#a6e22e">value</span>); <span style="color:#75715e">// 1，然后是 2，然后是 3
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><p><code>BigInt</code> 是一种特殊的数字类型，它提供了对任意长度整数的支持。</p>
<p>创建 bigint 的方式有两种：在一个整数字面量后面加 <code>n</code> 或者调用 <code>BigInt</code> 函数，该函数从字符串、数字等中生成 bigint。</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>搜索方式</th>
<th>可以在元素上调用？</th>
<th>实时的？</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>querySelector</code></td>
<td>CSS-selector</td>
<td>✔</td>
<td>-</td>
</tr>
<tr>
<td><code>querySelectorAll</code></td>
<td>CSS-selector</td>
<td>✔</td>
<td>-</td>
</tr>
<tr>
<td><code>getElementById</code></td>
<td><code>id</code></td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td><code>getElementsByName</code></td>
<td><code>name</code></td>
<td>-</td>
<td>✔</td>
</tr>
</tbody>
</table>
<p>elem.attributes — 所有特性的集合</p>
<p>elem.hasAttribute(name)` — 检查是否存在这个特性。</p>
]]></content>
        </item>
        
        <item>
            <title></title>
            <link>https://MoeSinon.github.io/blog/posts/program/</link>
            <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
            
            <guid>https://MoeSinon.github.io/blog/posts/program/</guid>
            <description>多参数
与golang细微差别实在Rest 参数可以通过使用三个点 ... 并在后面跟着包含剩余参数的数组名称，来将它们包含在函数定义中。这些点的字面意思是“将剩余参数收集到一个数组中”。
有一个名为 arguments 的特殊的类数组对象，该对象按参数索引包含所有参数。如果我们在箭头函数中访问 arguments，访问到的 arguments 并不属于箭头函数，而是属于箭头函数外部的“普通”函数。
function f() { let showArg = () =&amp;gt; alert(arguments[0]); showArg(); } f(1); // 1 let arr = [3, 5, 1]; alert( Math.max(...arr) ); // 5（spread 语法把数组转换为参数列表） let arr1 = [1, -2, 3, 4]; let arr2 = [8, 3, -8, 1]; alert( Math.max(...arr1, ...arr2) ); // 8 let arr1 = [1, -2, 3, 4]; let arr2 = [8, 3, -8, 1]; alert( Math.</description>
            <content type="html"><![CDATA[<p>多参数</p>
<p>与golang细微差别实在Rest 参数可以通过使用三个点 <code>...</code> 并在后面跟着包含剩余参数的数组名称，来将它们包含在函数定义中。这些点的字面意思是“将剩余参数收集到一个数组中”。</p>
<p>有一个名为 <code>arguments</code> 的特殊的类数组对象，该对象按参数索引包含所有参数。如果我们在箭头函数中访问 <code>arguments</code>，访问到的 <code>arguments</code> 并不属于箭头函数，而是属于箭头函数外部的“普通”函数。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">f</span>() {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">showArg</span> <span style="color:#f92672">=</span> () =&gt; <span style="color:#a6e22e">alert</span>(<span style="color:#a6e22e">arguments</span>[<span style="color:#ae81ff">0</span>]);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">showArg</span>();
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">f</span>(<span style="color:#ae81ff">1</span>); <span style="color:#75715e">// 1
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">arr</span> <span style="color:#f92672">=</span> [<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">1</span>];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">alert</span>( Math.<span style="color:#a6e22e">max</span>(...<span style="color:#a6e22e">arr</span>) ); <span style="color:#75715e">// 5（spread 语法把数组转换为参数列表）
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">arr1</span> <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>];
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">arr2</span> <span style="color:#f92672">=</span> [<span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">3</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">1</span>];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">alert</span>( Math.<span style="color:#a6e22e">max</span>(...<span style="color:#a6e22e">arr1</span>, ...<span style="color:#a6e22e">arr2</span>) ); <span style="color:#75715e">// 8
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">arr1</span> <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>];
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">arr2</span> <span style="color:#f92672">=</span> [<span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">3</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">1</span>];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">alert</span>( Math.<span style="color:#a6e22e">max</span>(<span style="color:#ae81ff">1</span>, ...<span style="color:#a6e22e">arr1</span>, <span style="color:#ae81ff">2</span>, ...<span style="color:#a6e22e">arr2</span>, <span style="color:#ae81ff">25</span>) ); <span style="color:#75715e">// 25
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">obj</span> <span style="color:#f92672">=</span> { <span style="color:#a6e22e">a</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">b</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">2</span>, <span style="color:#a6e22e">c</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">3</span> };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">objCopy</span> <span style="color:#f92672">=</span> { ...<span style="color:#a6e22e">obj</span> }; <span style="color:#75715e">// 将对象 spread 到参数列表中
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                          <span style="color:#75715e">// 然后将结果返回到一个新对象
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">arr</span> <span style="color:#f92672">=</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">arrCopy</span> <span style="color:#f92672">=</span> [...<span style="color:#a6e22e">arr</span>]; <span style="color:#75715e">// 将数组 spread 到参数列表中
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                        <span style="color:#75715e">// 然后将结果放到一个新数组
</span></span></span></code></pre></div><p>闭包 (一个记住其外部变量并可以访问这些变量的函数)</p>
<p>词法环境(我们可以使用它来隔离一段代码，该段代码执行自己的任务，并使用仅属于自己的变量)</p>
<p>所有函数都有名为 <code>[[Environment]]</code> 的隐藏属性，该属性保存了对创建该函数的词法环境的引用。（以下在嵌套函数中适用）当函数中的代码查找变量时，它首先搜索自己的词法环境（为空，因为那里没有局部变量），然后是外部的词法环境，并且在哪里找到就在哪里修改。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">f</span>() {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">value</span> <span style="color:#f92672">=</span> Math.<span style="color:#a6e22e">random</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">function</span>() { <span style="color:#a6e22e">alert</span>(<span style="color:#a6e22e">value</span>); };
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 数组中的 3 个函数，每个都与来自一个对应的 f() 的词法环境
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">arr</span> <span style="color:#f92672">=</span> [<span style="color:#a6e22e">f</span>(), <span style="color:#a6e22e">f</span>(), <span style="color:#a6e22e">f</span>()];
</span></span></code></pre></div><p>eg:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">phrase</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Hello&#34;</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#66d9ef">true</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">user</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;John&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">sayHi</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">alert</span>(<span style="color:#e6db74">`</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">phrase</span><span style="color:#e6db74">}</span><span style="color:#e6db74">, </span><span style="color:#e6db74">${</span><span style="color:#a6e22e">user</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">sayHi</span>();<span style="color:#75715e">//error
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">去掉if再看看</span>
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title></title>
            <link>https://MoeSinon.github.io/blog/posts/threedays-jsreact-easy/</link>
            <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
            
            <guid>https://MoeSinon.github.io/blog/posts/threedays-jsreact-easy/</guid>
            <description>接下来我们进入技巧模式，技巧模式需要你注意，注意，注意，无需动脑子
首先随便开启一个后台控制控制器，如果不是赋值那就不要加”；“,当然你也可以加。
接下来先来看一下strict模式
&amp;#34;use strict&amp;#34; 如果你需要自动添加“类”和“模块”那就不要用 prompt() confirm() 可以试试 零填充右移位 （&amp;gt;&amp;gt;&amp;gt; ) ?? 试试这个或许就知道 alert(firstName ?? lastName ?? nickName ?? &amp;#34;Anonymous&amp;#34;); // Supercoder 还有这个 let x = 1 &amp;amp;&amp;amp; 2 ?? 3; // Syntax error 想要让他work？ let x = (1 &amp;amp;&amp;amp; 2) ?? 3; // Works [1, 2].forEach(alert) for (let i = 0; i &amp;lt; 10; i++) { if (!cond) continue; ... // &amp;lt;- 没有额外的嵌套 } 为了创建“真正的拷贝”（一个克隆），我们可以使用 Object.assign 来做所谓的“浅拷贝”（嵌套对象被通过引用进行拷贝）或者使用“深拷贝”函数，例如 _.cloneDeep(obj)。</description>
            <content type="html"><![CDATA[<p>接下来我们进入技巧模式，技巧模式需要你注意，注意，注意，无需动脑子</p>
<p>首先随便开启一个后台控制控制器，如果不是赋值那就不要加”；“,当然你也可以加。</p>
<p>接下来先来看一下strict模式</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#e6db74">&#34;use strict&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">如果你需要自动添加</span><span style="color:#960050;background-color:#1e0010">“</span><span style="color:#a6e22e">类</span><span style="color:#960050;background-color:#1e0010">”</span><span style="color:#a6e22e">和</span><span style="color:#960050;background-color:#1e0010">“</span><span style="color:#a6e22e">模块</span><span style="color:#960050;background-color:#1e0010">”</span><span style="color:#a6e22e">那就不要用</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">prompt</span>() <span style="color:#a6e22e">confirm</span>() <span style="color:#a6e22e">可以试试</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">零填充右移位</span> <span style="color:#960050;background-color:#1e0010">（</span><span style="color:#f92672">&gt;&gt;&gt;</span> )
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#f92672">??</span> 
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">试试这个或许就知道</span>    
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">alert</span>(<span style="color:#a6e22e">firstName</span> <span style="color:#f92672">??</span> <span style="color:#a6e22e">lastName</span> <span style="color:#f92672">??</span> <span style="color:#a6e22e">nickName</span> <span style="color:#f92672">??</span> <span style="color:#e6db74">&#34;Anonymous&#34;</span>); <span style="color:#75715e">// Supercoder
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">还有这个</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">x</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">??</span> <span style="color:#ae81ff">3</span>; <span style="color:#75715e">// Syntax error
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">想要让他work</span><span style="color:#960050;background-color:#1e0010">？</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">x</span> <span style="color:#f92672">=</span> (<span style="color:#ae81ff">1</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">2</span>) <span style="color:#f92672">??</span> <span style="color:#ae81ff">3</span>; <span style="color:#75715e">// Works
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span>[<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>].<span style="color:#a6e22e">forEach</span>(<span style="color:#a6e22e">alert</span>)
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span>let i <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> 10<span style="color:#f92672">;</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> <span style="color:#f92672">(!</span>cond<span style="color:#f92672">)</span> <span style="color:#66d9ef">continue</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">...</span>  <span style="color:#75715e">// &lt;- 没有额外的嵌套
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>为了创建“真正的拷贝”（一个克隆），我们可以使用 <code>Object.assign</code> 来做所谓的“浅拷贝”（嵌套对象被通过引用进行拷贝）或者使用“深拷贝”函数，例如 <a href="https://lodash.com/docs#cloneDeep">_.cloneDeep(obj)</a>。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">delete</span> <span style="color:#a6e22e">object</span>;
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">垃圾回收</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">对于开发者来说</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">JavaScript</span> <span style="color:#a6e22e">的内存管理是自动的</span><span style="color:#960050;background-color:#1e0010">、</span><span style="color:#a6e22e">无形的</span><span style="color:#960050;background-color:#1e0010">。</span><span style="color:#a6e22e">我们创建的原始值</span><span style="color:#960050;background-color:#1e0010">、</span><span style="color:#a6e22e">对象</span><span style="color:#960050;background-color:#1e0010">、</span><span style="color:#a6e22e">函数</span><span style="color:#960050;background-color:#1e0010">……</span><span style="color:#a6e22e">这一切都会占用内存</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">当我们不再需要某个东西时会发生什么</span><span style="color:#960050;background-color:#1e0010">？</span><span style="color:#a6e22e">JavaScript</span> <span style="color:#a6e22e">引擎如何发现它并清理它</span><span style="color:#960050;background-color:#1e0010">？</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">可达性</span><span style="color:#960050;background-color:#1e0010">（</span><span style="color:#a6e22e">Reachability</span><span style="color:#960050;background-color:#1e0010">）</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">JavaScript</span> <span style="color:#a6e22e">中主要的内存管理概念是</span> <span style="color:#a6e22e">可达性</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">简而言之</span><span style="color:#960050;background-color:#1e0010">，“</span><span style="color:#a6e22e">可达</span><span style="color:#960050;background-color:#1e0010">”</span><span style="color:#a6e22e">值是那些以某种方式可访问或可用的值</span><span style="color:#960050;background-color:#1e0010">。</span><span style="color:#a6e22e">它们一定是存储在内存中的</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">这里列出固有的可达值的基本集合</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">这些值明显不能被释放</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">比方说</span><span style="color:#960050;background-color:#1e0010">：</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">当前执行的函数</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">它的局部变量和参数</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">当前嵌套调用链上的其他函数</span><span style="color:#960050;background-color:#1e0010">、</span><span style="color:#a6e22e">它们的局部变量和参数</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">全局变量</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">（</span><span style="color:#a6e22e">还有一些内部的</span><span style="color:#960050;background-color:#1e0010">）</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">这些值被称作</span> <span style="color:#a6e22e">根</span><span style="color:#960050;background-color:#1e0010">（</span><span style="color:#a6e22e">roots</span><span style="color:#960050;background-color:#1e0010">）。</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">如果一个值可以通过引用或引用链从根访问任何其他值</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">则认为该值是可达的</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">比方说</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">如果全局变量中有一个对象</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">并且该对象有一个属性引用了另一个对象</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">则</span> <span style="color:#a6e22e">该</span> <span style="color:#a6e22e">对象被认为是可达的</span><span style="color:#960050;background-color:#1e0010">。</span><span style="color:#a6e22e">而且它引用的内容也是可达的</span><span style="color:#960050;background-color:#1e0010">。</span><span style="color:#a6e22e">下面是详细的例子</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">在</span> <span style="color:#a6e22e">JavaScript</span> <span style="color:#a6e22e">引擎中有一个被称作</span> <span style="color:#a6e22e">垃圾回收器</span> <span style="color:#a6e22e">的东西在后台执行</span><span style="color:#960050;background-color:#1e0010">。</span><span style="color:#a6e22e">它监控着所有对象的状态</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">并删除掉那些已经不可达的</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">一个简单的例子</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">这里是一个最简单的例子</span><span style="color:#960050;background-color:#1e0010">：</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// user 具有对这个对象的引用
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">user</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">name</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;John&#34;</span>
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">这里的箭头描述了一个对象引用</span><span style="color:#960050;background-color:#1e0010">。</span><span style="color:#a6e22e">全局变量</span> <span style="color:#e6db74">&#34;user&#34;</span> <span style="color:#a6e22e">引用了对象</span> {<span style="color:#a6e22e">name</span><span style="color:#960050;background-color:#1e0010">：</span><span style="color:#e6db74">&#34;John&#34;</span>}<span style="color:#960050;background-color:#1e0010">（</span><span style="color:#a6e22e">为简洁起见</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">我们称它为</span> <span style="color:#a6e22e">John</span><span style="color:#960050;background-color:#1e0010">）。</span><span style="color:#a6e22e">John</span> <span style="color:#a6e22e">的</span> <span style="color:#e6db74">&#34;name&#34;</span> <span style="color:#a6e22e">属性存储一个原始值</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">所以它被写在对象内部</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">如果</span> <span style="color:#a6e22e">user</span> <span style="color:#a6e22e">的值被重写了</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">这个引用就没了</span><span style="color:#960050;background-color:#1e0010">：</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">user</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">现在</span> <span style="color:#a6e22e">John</span> <span style="color:#a6e22e">变成不可达的了</span><span style="color:#960050;background-color:#1e0010">。</span><span style="color:#a6e22e">因为没有引用了</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">就不能访问到它了</span><span style="color:#960050;background-color:#1e0010">。</span><span style="color:#a6e22e">垃圾回收器会认为它是垃圾数据并进行回收</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">然后释放内存</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">两个引用</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">现在让我们想象下</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">我们把</span> <span style="color:#a6e22e">user</span> <span style="color:#a6e22e">的引用复制给</span> <span style="color:#a6e22e">admin</span><span style="color:#960050;background-color:#1e0010">：</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// user 具有对这个对象的引用
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">user</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">name</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;John&#34;</span>
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">admin</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">user</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">现在如果执行刚刚的那个操作</span><span style="color:#960050;background-color:#1e0010">：</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">user</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span>;
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">……</span><span style="color:#a6e22e">然后对象仍然可以被通过</span> <span style="color:#a6e22e">admin</span> <span style="color:#a6e22e">这个全局变量访问到</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">所以对象还在内存中</span><span style="color:#960050;background-color:#1e0010">。</span><span style="color:#a6e22e">如果我们又重写了</span> <span style="color:#a6e22e">admin</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">对象就会被删除</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">相互关联的对象</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">现在来看一个更复杂的例子</span><span style="color:#960050;background-color:#1e0010">。</span><span style="color:#a6e22e">这是个家庭</span><span style="color:#960050;background-color:#1e0010">：</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">marry</span>(<span style="color:#a6e22e">man</span>, <span style="color:#a6e22e">woman</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">woman</span>.<span style="color:#a6e22e">husband</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">man</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">man</span>.<span style="color:#a6e22e">wife</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">woman</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">father</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">man</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">mother</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">woman</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">family</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">marry</span>({
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">name</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;John&#34;</span>
</span></span><span style="display:flex;"><span>}, {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">name</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;Ann&#34;</span>
</span></span><span style="display:flex;"><span>});
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">marry</span> <span style="color:#a6e22e">函数通过让两个对象相互引用使它们</span><span style="color:#960050;background-color:#1e0010">“</span><span style="color:#a6e22e">结婚</span><span style="color:#960050;background-color:#1e0010">”</span><span style="color:#a6e22e">了</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">并返回了一个包含这两个对象的新对象</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">由此产生的内存结构</span><span style="color:#960050;background-color:#1e0010">：</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">到目前为止</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">所有对象都是可达的</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">现在让我们移除两个引用</span><span style="color:#960050;background-color:#1e0010">：</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">delete</span> <span style="color:#a6e22e">family</span>.<span style="color:#a6e22e">father</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">delete</span> <span style="color:#a6e22e">family</span>.<span style="color:#a6e22e">mother</span>.<span style="color:#a6e22e">husband</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">仅删除这两个引用中的一个是不够的</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">因为所有的对象仍然都是可达的</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">但是</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">如果我们把这两个都删除</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">那么我们可以看到再也没有对</span> <span style="color:#a6e22e">John</span> <span style="color:#a6e22e">的引用了</span><span style="color:#960050;background-color:#1e0010">：</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">对外引用不重要</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">只有传入引用才可以使对象可达</span><span style="color:#960050;background-color:#1e0010">。</span><span style="color:#a6e22e">所以</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">John</span> <span style="color:#a6e22e">现在是不可达的</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">并且将被从内存中删除</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">同时</span> <span style="color:#a6e22e">John</span> <span style="color:#a6e22e">的所有数据也将变得不可达</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">经过垃圾回收</span><span style="color:#960050;background-color:#1e0010">：</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">无法到达的岛屿</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">几个对象相互引用</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">但外部没有对其任意对象的引用</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">这些对象也可能是不可达的</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">并被从内存中删除</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">源对象与上面相同</span><span style="color:#960050;background-color:#1e0010">。</span><span style="color:#a6e22e">然后</span><span style="color:#960050;background-color:#1e0010">：</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">family</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span>;
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">内存内部状态将变成</span><span style="color:#960050;background-color:#1e0010">：</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">这个例子展示了可达性概念的重要性</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">显而易见</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">John</span> <span style="color:#a6e22e">和</span> <span style="color:#a6e22e">Ann</span> <span style="color:#a6e22e">仍然连着</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">都有传入的引用</span><span style="color:#960050;background-color:#1e0010">。</span><span style="color:#a6e22e">但是</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">这样还不够</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">前面说的</span> <span style="color:#e6db74">&#34;family&#34;</span> <span style="color:#a6e22e">对象已经不再与根相连</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">没有了外部对其的引用</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">所以它变成了一座</span><span style="color:#960050;background-color:#1e0010">“</span><span style="color:#a6e22e">孤岛</span><span style="color:#960050;background-color:#1e0010">”，</span><span style="color:#a6e22e">并且将被从内存中删除</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">内部算法</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">垃圾回收的基本算法被称为</span> <span style="color:#960050;background-color:#1e0010">“</span><span style="color:#a6e22e">mark</span><span style="color:#f92672">-</span><span style="color:#a6e22e">and</span><span style="color:#f92672">-</span><span style="color:#a6e22e">sweep</span><span style="color:#960050;background-color:#1e0010">”。</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">定期执行以下</span><span style="color:#960050;background-color:#1e0010">“</span><span style="color:#a6e22e">垃圾回收</span><span style="color:#960050;background-color:#1e0010">”</span><span style="color:#a6e22e">步骤</span><span style="color:#960050;background-color:#1e0010">：</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">垃圾收集器找到所有的根</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">并</span><span style="color:#960050;background-color:#1e0010">“</span><span style="color:#a6e22e">标记</span><span style="color:#960050;background-color:#1e0010">”（</span><span style="color:#a6e22e">记住</span><span style="color:#960050;background-color:#1e0010">）</span><span style="color:#a6e22e">它们</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">然后它遍历并</span><span style="color:#960050;background-color:#1e0010">“</span><span style="color:#a6e22e">标记</span><span style="color:#960050;background-color:#1e0010">”</span><span style="color:#a6e22e">来自它们的所有引用</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">然后它遍历标记的对象并标记</span> <span style="color:#a6e22e">它们的</span> <span style="color:#a6e22e">引用</span><span style="color:#960050;background-color:#1e0010">。</span><span style="color:#a6e22e">所有被遍历到的对象都会被记住</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">以免将来再次遍历到同一个对象</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">……</span><span style="color:#a6e22e">如此操作</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">直到所有可达的</span><span style="color:#960050;background-color:#1e0010">（</span><span style="color:#a6e22e">从根部</span><span style="color:#960050;background-color:#1e0010">）</span><span style="color:#a6e22e">引用都被访问到</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">没有被标记的对象都会被删除</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">例如</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">使我们的对象有如下的结构</span><span style="color:#960050;background-color:#1e0010">：</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">我们可以清楚地看到右侧有一个</span><span style="color:#960050;background-color:#1e0010">“</span><span style="color:#a6e22e">无法到达的岛屿</span><span style="color:#960050;background-color:#1e0010">”。</span><span style="color:#a6e22e">现在我们来看看</span><span style="color:#960050;background-color:#1e0010">“</span><span style="color:#a6e22e">标记和清除</span><span style="color:#960050;background-color:#1e0010">”</span><span style="color:#a6e22e">垃圾收集器如何处理它</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">第一步标记所有的根</span><span style="color:#960050;background-color:#1e0010">：</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">然后它们的引用被标记了</span><span style="color:#960050;background-color:#1e0010">：</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">……</span><span style="color:#a6e22e">如果还有引用的话</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">继续标记</span><span style="color:#960050;background-color:#1e0010">：</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">现在</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">无法通过这个过程访问到的对象被认为是不可达的</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">并且会被删除</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">我们还可以将这个过程想象成从根溢出一个巨大的油漆桶</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">它流经所有引用并标记所有可到达的对象</span><span style="color:#960050;background-color:#1e0010">。</span><span style="color:#a6e22e">然后移除未标记的</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">这是垃圾收集工作的概念</span><span style="color:#960050;background-color:#1e0010">。</span><span style="color:#a6e22e">JavaScript</span> <span style="color:#a6e22e">引擎做了许多优化</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">使垃圾回收运行速度更快</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">并且不影响正常代码运行</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">一些优化建议</span><span style="color:#960050;background-color:#1e0010">：</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">分代收集</span><span style="color:#960050;background-color:#1e0010">（</span><span style="color:#a6e22e">Generational</span> <span style="color:#a6e22e">collection</span><span style="color:#960050;background-color:#1e0010">）——</span> <span style="color:#a6e22e">对象被分成两组</span><span style="color:#960050;background-color:#1e0010">：“</span><span style="color:#a6e22e">新的</span><span style="color:#960050;background-color:#1e0010">”</span><span style="color:#a6e22e">和</span><span style="color:#960050;background-color:#1e0010">“</span><span style="color:#a6e22e">旧的</span><span style="color:#960050;background-color:#1e0010">”。</span><span style="color:#a6e22e">许多对象出现</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">完成它们的工作并很快死去</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">它们可以很快被清理</span><span style="color:#960050;background-color:#1e0010">。</span><span style="color:#a6e22e">那些长期存活的对象会变得</span><span style="color:#960050;background-color:#1e0010">“</span><span style="color:#a6e22e">老旧</span><span style="color:#960050;background-color:#1e0010">”，</span><span style="color:#a6e22e">而且被检查的频次也会减少</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">增量收集</span><span style="color:#960050;background-color:#1e0010">（</span><span style="color:#a6e22e">Incremental</span> <span style="color:#a6e22e">collection</span><span style="color:#960050;background-color:#1e0010">）——</span> <span style="color:#a6e22e">如果有许多对象</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">并且我们试图一次遍历并标记整个对象集</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">则可能需要一些时间</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">并在执行过程中带来明显的延迟</span><span style="color:#960050;background-color:#1e0010">。</span><span style="color:#a6e22e">所以引擎试图将垃圾收集工作分成几部分来做</span><span style="color:#960050;background-color:#1e0010">。</span><span style="color:#a6e22e">然后将这几部分会逐一进行处理</span><span style="color:#960050;background-color:#1e0010">。</span><span style="color:#a6e22e">这需要它们之间有额外的标记来追踪变化</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">但是这样会有许多微小的延迟而不是一个大的延迟</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">闲时收集</span><span style="color:#960050;background-color:#1e0010">（</span><span style="color:#a6e22e">Idle</span><span style="color:#f92672">-</span><span style="color:#a6e22e">time</span> <span style="color:#a6e22e">collection</span><span style="color:#960050;background-color:#1e0010">）——</span> <span style="color:#a6e22e">垃圾收集器只会在</span> <span style="color:#a6e22e">CPU</span> <span style="color:#a6e22e">空闲时尝试运行</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">以减少可能对代码执行的影响</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">还有其他垃圾回收算法的优化和风格</span><span style="color:#960050;background-color:#1e0010">。</span><span style="color:#a6e22e">尽管我想在这里描述它们</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">但我必须打住了</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">因为不同的引擎会有不同的调整和技巧</span><span style="color:#960050;background-color:#1e0010">。</span><span style="color:#a6e22e">而且</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">更重要的是</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">随着引擎的发展</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">情况会发生变化</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">所以在没有真实需求的时候</span><span style="color:#960050;background-color:#1e0010">，“</span><span style="color:#a6e22e">提前</span><span style="color:#960050;background-color:#1e0010">”</span><span style="color:#a6e22e">学习这些内容是不值得的</span><span style="color:#960050;background-color:#1e0010">。</span><span style="color:#a6e22e">当然</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">除非你纯粹是出于兴趣</span><span style="color:#960050;background-color:#1e0010">。</span><span style="color:#a6e22e">我在下面给你提供了一些相关链接</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">总结</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">主要需要掌握的内容</span><span style="color:#960050;background-color:#1e0010">：</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">垃圾回收是自动完成的</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">我们不能强制执行或是阻止执行</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">当对象是可达状态时</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">它一定是存在于内存中的</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">被引用与可访问</span><span style="color:#960050;background-color:#1e0010">（</span><span style="color:#a6e22e">从一个根</span><span style="color:#960050;background-color:#1e0010">）</span><span style="color:#a6e22e">不同</span><span style="color:#960050;background-color:#1e0010">：</span><span style="color:#a6e22e">一组相互连接的对象可能整体都不可达</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">现代引擎实现了垃圾回收的高级算法</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010">《</span><span style="color:#a6e22e">The</span> <span style="color:#a6e22e">Garbage</span> <span style="color:#a6e22e">Collection</span> <span style="color:#a6e22e">Handbook</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">The</span> <span style="color:#a6e22e">Art</span> <span style="color:#66d9ef">of</span> <span style="color:#a6e22e">Automatic</span> <span style="color:#a6e22e">Memory</span> <span style="color:#a6e22e">Management</span><span style="color:#960050;background-color:#1e0010">》（</span><span style="color:#a6e22e">R</span>. <span style="color:#a6e22e">Jones</span> <span style="color:#a6e22e">等人著</span><span style="color:#960050;background-color:#1e0010">）</span><span style="color:#a6e22e">这本书涵盖了其中一些内容</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">如果你熟悉底层</span><span style="color:#960050;background-color:#1e0010">（</span><span style="color:#a6e22e">low</span><span style="color:#f92672">-</span><span style="color:#a6e22e">level</span><span style="color:#960050;background-color:#1e0010">）</span><span style="color:#a6e22e">编程</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">关于</span> <span style="color:#a6e22e">V8</span> <span style="color:#a6e22e">引擎垃圾回收器的更详细信息请参阅文章</span> <span style="color:#a6e22e">V8</span> <span style="color:#a6e22e">之旅</span><span style="color:#960050;background-color:#1e0010">：</span><span style="color:#a6e22e">垃圾回收</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">V8</span> <span style="color:#a6e22e">博客</span> <span style="color:#a6e22e">还不时发布关于内存管理变化的文章</span><span style="color:#960050;background-color:#1e0010">。</span><span style="color:#a6e22e">当然</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">为了学习垃圾收集</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">你最好通过学习</span> <span style="color:#a6e22e">V8</span> <span style="color:#a6e22e">引擎内部知识来进行准备</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">并阅读一个名为</span> <span style="color:#a6e22e">Vyacheslav</span> <span style="color:#a6e22e">Egorov</span> <span style="color:#a6e22e">的</span> <span style="color:#a6e22e">V8</span> <span style="color:#a6e22e">引擎工程师的博客</span><span style="color:#960050;background-color:#1e0010">。</span><span style="color:#a6e22e">我之所以说</span> <span style="color:#960050;background-color:#1e0010">“</span><span style="color:#a6e22e">V8</span><span style="color:#960050;background-color:#1e0010">”，</span><span style="color:#a6e22e">因为网上关于它的文章最丰富的</span><span style="color:#960050;background-color:#1e0010">。</span><span style="color:#a6e22e">对于其他引擎</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">许多方法是相似的</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">但在垃圾收集上许多方面有所不同</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">当你需要底层的优化时</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">对引擎有深入了解将很有帮助</span><span style="color:#960050;background-color:#1e0010">。</span><span style="color:#a6e22e">在熟悉了这门编程语言之后</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">把熟悉引擎作为下一步计划是明智之选</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span></code></pre></div><p>构造函数</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">什么构造函数</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">构造函数在技术上是常规函数</span><span style="color:#960050;background-color:#1e0010">。</span><span style="color:#a6e22e">不过有两个约定</span><span style="color:#960050;background-color:#1e0010">：</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">它们的命名以大写字母开头</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">它们只能由</span> <span style="color:#e6db74">&#34;new&#34;</span> <span style="color:#a6e22e">操作符来执行</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">其实构造函数仅仅是常规函数中的一种</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">只不过你可以复用</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span>document.<span style="color:#a6e22e">querySelector</span>(<span style="color:#e6db74">&#39;.elem&#39;</span>)<span style="color:#a6e22e">属性选择器</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">可选链</span><span style="color:#f92672">?</span>.
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">例如</span> <span style="color:#a6e22e">value</span><span style="color:#f92672">?</span>.<span style="color:#a6e22e">prop</span><span style="color:#960050;background-color:#1e0010">：</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">如果</span> <span style="color:#a6e22e">value</span> <span style="color:#a6e22e">存在</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">则结果与</span> <span style="color:#a6e22e">value</span>.<span style="color:#a6e22e">prop</span> <span style="color:#a6e22e">相同</span><span style="color:#960050;background-color:#1e0010">，</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">否则</span><span style="color:#960050;background-color:#1e0010">（</span><span style="color:#a6e22e">当</span> <span style="color:#a6e22e">value</span> <span style="color:#a6e22e">为</span> <span style="color:#66d9ef">undefined</span><span style="color:#f92672">/</span><span style="color:#66d9ef">null</span> <span style="color:#a6e22e">时</span><span style="color:#960050;background-color:#1e0010">）</span><span style="color:#a6e22e">则返回</span> <span style="color:#66d9ef">undefined</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">user</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span>;
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">alert</span>( <span style="color:#a6e22e">user</span><span style="color:#f92672">?</span>.<span style="color:#a6e22e">address</span> ); <span style="color:#75715e">// undefined
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">alert</span>( <span style="color:#a6e22e">user</span><span style="color:#f92672">?</span>.<span style="color:#a6e22e">address</span>.<span style="color:#a6e22e">street</span> ); <span style="color:#75715e">// undefined
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>       
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">userGuest</span> <span style="color:#f92672">=</span> {};
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">userAdmin</span>.<span style="color:#a6e22e">admin</span><span style="color:#f92672">?</span>.(); <span style="color:#75715e">// I am admin
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">userGuest</span>.<span style="color:#a6e22e">admin</span><span style="color:#f92672">?</span>.(); <span style="color:#75715e">// 啥都没发生（没有这样的方法）
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">delete</span> <span style="color:#a6e22e">user</span><span style="color:#f92672">?</span>.<span style="color:#a6e22e">name</span>; <span style="color:#75715e">// 如果 user 存在，则删除 user.name&#39;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">user</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span>;
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">user</span><span style="color:#f92672">?</span>.<span style="color:#a6e22e">name</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;John&#34;</span>; <span style="color:#75715e">// Error，不起作用
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 因为它在计算的是：undefined = &#34;John&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">obj</span><span style="color:#f92672">?</span>.<span style="color:#a6e22e">prop</span> <span style="color:#960050;background-color:#1e0010">——</span> <span style="color:#a6e22e">如果</span> <span style="color:#a6e22e">obj</span> <span style="color:#a6e22e">存在则返回</span> <span style="color:#a6e22e">obj</span>.<span style="color:#a6e22e">prop</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">否则返回</span> <span style="color:#66d9ef">undefined</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">obj</span><span style="color:#f92672">?</span>.[<span style="color:#a6e22e">prop</span>] <span style="color:#960050;background-color:#1e0010">——</span> <span style="color:#a6e22e">如果</span> <span style="color:#a6e22e">obj</span> <span style="color:#a6e22e">存在则返回</span> <span style="color:#a6e22e">obj</span>[<span style="color:#a6e22e">prop</span>]<span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">否则返回</span> <span style="color:#66d9ef">undefined</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">obj</span>.<span style="color:#a6e22e">method</span><span style="color:#f92672">?</span>.() <span style="color:#960050;background-color:#1e0010">——</span> <span style="color:#a6e22e">如果</span> <span style="color:#a6e22e">obj</span>.<span style="color:#a6e22e">method</span> <span style="color:#a6e22e">存在则调用</span> <span style="color:#a6e22e">obj</span>.<span style="color:#a6e22e">method</span>()<span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">否则返回</span> <span style="color:#66d9ef">undefined</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span></code></pre></div><p>symbol</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">根据规范</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">只有两种原始类型可以用作对象属性键</span><span style="color:#960050;background-color:#1e0010">：</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">字符串类型</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">symbol</span> <span style="color:#a6e22e">类型</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">否则</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">如果使用另一种类型</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">例如数字</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">它会被自动转换为字符串</span><span style="color:#960050;background-color:#1e0010">。</span><span style="color:#a6e22e">所以</span> <span style="color:#a6e22e">obj</span>[<span style="color:#ae81ff">1</span>] <span style="color:#a6e22e">与</span> <span style="color:#a6e22e">obj</span>[<span style="color:#e6db74">&#34;1&#34;</span>] <span style="color:#a6e22e">相同</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">而</span> <span style="color:#a6e22e">obj</span>[<span style="color:#66d9ef">true</span>] <span style="color:#a6e22e">与</span> <span style="color:#a6e22e">obj</span>[<span style="color:#e6db74">&#34;true&#34;</span>] <span style="color:#a6e22e">相同</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">id</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Symbol</span>(<span style="color:#e6db74">&#34;id&#34;</span>);
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">alert</span>(<span style="color:#a6e22e">id</span>.<span style="color:#a6e22e">toString</span>()); <span style="color:#75715e">// Symbol(id)，现在它有效了
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">symbol</span> <span style="color:#a6e22e">属性不参与</span> <span style="color:#66d9ef">for</span>..<span style="color:#66d9ef">in</span> <span style="color:#a6e22e">循环</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">id</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Symbol</span>(<span style="color:#e6db74">&#34;id&#34;</span>);
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">alert</span>(<span style="color:#a6e22e">id</span>.<span style="color:#a6e22e">description</span>); <span style="color:#75715e">// id
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">id</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Symbol</span>(<span style="color:#e6db74">&#34;id&#34;</span>);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">user</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">name</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;John&#34;</span>,
</span></span><span style="display:flex;"><span>  [<span style="color:#a6e22e">id</span>]<span style="color:#f92672">:</span> <span style="color:#ae81ff">123</span> <span style="color:#75715e">// 而不是 &#34;id&#34;：123
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 从全局注册表中读取
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">id</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Symbol</span>.<span style="color:#66d9ef">for</span>(<span style="color:#e6db74">&#34;id&#34;</span>); <span style="color:#75715e">// 如果该 symbol 不存在，则创建它
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">// 再次读取（可能是在代码中的另一个位置）
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">idAgain</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Symbol</span>.<span style="color:#66d9ef">for</span>(<span style="color:#e6db74">&#34;id&#34;</span>);
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 相同的 symbol
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">alert</span>( <span style="color:#a6e22e">id</span> <span style="color:#f92672">===</span> <span style="color:#a6e22e">idAgain</span> ); <span style="color:#75715e">// true
</span></span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title></title>
            <link>https://MoeSinon.github.io/blog/posts/threedays-jsreact/</link>
            <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
            
            <guid>https://MoeSinon.github.io/blog/posts/threedays-jsreact/</guid>
            <description>JavaScripts基础赏析 基于ES6，现代javascript基础以及函数式编程
首先你必须得知道
什么是值，primitive and object
primitive：null，undefined和8种类型，另外要注意&amp;quot;number&amp;quot;类型其实是int
object：数组，是的数组也是对象，在golang中你也可以将数组视为对象
typeof undefined; // &amp;#34;undefined&amp;#34; typeof null; // &amp;#34;object&amp;#34; -- oops, bug! null === undefined; // false&amp;#34;这是一个和number&amp;#34; NaN === NaN; // false 0 === -0; // true 以上当出现对象之间进行比较采用引用比较，就算是相同的结构体也无法三等，或许这和golang有些相同
除此之外还有闭包，这也是和golang相似的地方，你会发现闭包是存在状态的，在每次调用该闭包时都会更新。闭的是变量，而不仅仅是值的快照，或者你可以将其视为回调的一种，只不过你在手动操作而已
function counter(step = 1) { var count = 0; return function increaseCount(){ count = count + step; return count; }; } var incBy1 = counter(1); var incBy3 = counter(3); incBy1(); // 1 incBy1(); // 2 incBy3(); // 3 incBy3(); // 6 incBy3(); // 9 func counter(a int) func() int { var b int return func() int { b = b + a return b } } func main() { var c = counter(1) log.</description>
            <content type="html"><![CDATA[<p>JavaScripts基础赏析 基于ES6，现代javascript基础以及函数式编程</p>
<p>首先你必须得知道</p>
<p>什么是值，<strong>primitive</strong> and <strong>object</strong></p>
<p><strong>primitive</strong>：null，undefined和8种类型，另外要注意&quot;number&quot;类型其实是int</p>
<p><strong>object</strong>：数组，是的数组也是对象，在golang中你也可以将数组视为对象</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">typeof</span> <span style="color:#66d9ef">undefined</span>;           <span style="color:#75715e">// &#34;undefined&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">typeof</span> <span style="color:#66d9ef">null</span>;                <span style="color:#75715e">// &#34;object&#34; -- oops, bug!
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">null</span> <span style="color:#f92672">===</span> <span style="color:#66d9ef">undefined</span>;     <span style="color:#75715e">// false&#34;这是一个和number&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">NaN</span> <span style="color:#f92672">===</span> <span style="color:#66d9ef">NaN</span>;            <span style="color:#75715e">// false
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#ae81ff">0</span> <span style="color:#f92672">===</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">0</span>;               <span style="color:#75715e">// true
</span></span></span></code></pre></div><p>以上当出现对象之间进行比较采用引用比较，就算是相同的结构体也无法三等，或许这和golang有些相同</p>
<p>除此之外还有闭包，这也是和golang相似的地方，你会发现闭包是存在状态的，在每次调用该闭包时都会更新。闭的是变量，而不仅仅是值的快照，或者你可以将其视为回调的一种，只不过你在手动操作而已</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">counter</span>(<span style="color:#a6e22e">step</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">count</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">increaseCount</span>(){
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">count</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">count</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">step</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">count</span>;
</span></span><span style="display:flex;"><span>    };
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">incBy1</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">counter</span>(<span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">incBy3</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">counter</span>(<span style="color:#ae81ff">3</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">incBy1</span>();       <span style="color:#75715e">// 1
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">incBy1</span>();       <span style="color:#75715e">// 2
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">incBy3</span>();       <span style="color:#75715e">// 3
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">incBy3</span>();       <span style="color:#75715e">// 6
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">incBy3</span>();       <span style="color:#75715e">// 9
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-go" data-lang="go"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">counter</span>(<span style="color:#a6e22e">a</span> <span style="color:#66d9ef">int</span>) <span style="color:#66d9ef">func</span>() <span style="color:#66d9ef">int</span> {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">b</span> <span style="color:#66d9ef">int</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">func</span>() <span style="color:#66d9ef">int</span> {
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">b</span> = <span style="color:#a6e22e">b</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">a</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">b</span>
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">c</span> = <span style="color:#a6e22e">counter</span>(<span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">c</span>())
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">c</span>())
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">log</span>.<span style="color:#a6e22e">Println</span>(<span style="color:#a6e22e">c</span>())
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span> <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">let</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">其中var的使用方式和golang是完全一致的</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">但效果上不一样</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">var在声明变量之后执行时会将声明优先执行</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">注意不是赋值</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">var声明局部变量之作用在函数域当然也包括全局域</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">对于语法块来说无法声明局部变量</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">什么是语法块</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">比如for循环语句</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">至少在ES6中无法在同一个语句块中重复声明</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">注意不是赋值</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">并且与const相同无法优先声明</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">在let基础又加了一层限制</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">无法重新分配即重新赋值</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">但我们知道一切皆对象</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">能使用const声明的变量不止8种还有</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">struct</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">array我们可以改变其中的成员变量</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">全局变量</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">globalThis</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 将当前用户信息全局化，以允许所有脚本访问它
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">globalThis</span>.<span style="color:#a6e22e">currentUser</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">name</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;John&#34;</span>
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">函数</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">函数即对象</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">意味着你可以使用对象的方发来操作函数</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">sayHi</span>() {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">alert</span>(<span style="color:#e6db74">&#34;Hi&#34;</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">alert</span>(<span style="color:#a6e22e">sayHi</span>.<span style="color:#a6e22e">name</span>); <span style="color:#75715e">// sayHi，你可以获取函数的名称，即使函数为匿名函数
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">f1</span>(<span style="color:#a6e22e">a</span>) {}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">f2</span>(<span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span>) {}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">many</span>(<span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span>, ...<span style="color:#a6e22e">more</span>) {}
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">alert</span>(<span style="color:#a6e22e">f1</span>.<span style="color:#a6e22e">length</span>); <span style="color:#75715e">// 1
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">alert</span>(<span style="color:#a6e22e">f2</span>.<span style="color:#a6e22e">length</span>); <span style="color:#75715e">// 2
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">alert</span>(<span style="color:#a6e22e">many</span>.<span style="color:#a6e22e">length</span>); <span style="color:#75715e">// 2
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">返回函数入参个数</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">但是</span>...<span style="color:#a6e22e">rest不参与计数</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">sayHi</span>() {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">alert</span>(<span style="color:#e6db74">&#34;Hi&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// 计算调用次数
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#a6e22e">sayHi</span>.<span style="color:#a6e22e">counter</span><span style="color:#f92672">++</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">sayHi</span>.<span style="color:#a6e22e">counter</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; <span style="color:#75715e">// 初始值
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">sayHi</span>(); <span style="color:#75715e">// Hi
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">sayHi</span>(); <span style="color:#75715e">// Hi
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">alert</span>( <span style="color:#e6db74">`Called </span><span style="color:#e6db74">${</span><span style="color:#a6e22e">sayHi</span>.<span style="color:#a6e22e">counter</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> times`</span> ); <span style="color:#75715e">// Called 2 times
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">可在函数内部声明一个属性</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">属性就是属性</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">不会影响函数的执行</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">也不会创建一个变量</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">sayHi</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">func</span>(<span style="color:#a6e22e">who</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">who</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">alert</span>(<span style="color:#e6db74">`Hello, </span><span style="color:#e6db74">${</span><span style="color:#a6e22e">who</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>);
</span></span><span style="display:flex;"><span>  } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">func</span>(<span style="color:#e6db74">&#34;Guest&#34;</span>); <span style="color:#75715e">// 现在一切正常
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  }
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">welcome</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">sayHi</span>;
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">sayHi</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span>;
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">welcome</span>(); <span style="color:#75715e">// Hello, Guest（嵌套调用有效）
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">使用</span> <span style="color:#66d9ef">new</span> Function <span style="color:#a6e22e">创建的函数</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">它的</span> [[<span style="color:#a6e22e">Environment</span>]] <span style="color:#a6e22e">指向全局词法环境</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">而不是函数所在的外部词法环境</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">func</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Function ([<span style="color:#a6e22e">arg1</span>, <span style="color:#a6e22e">arg2</span>, ...<span style="color:#a6e22e">argN</span>], <span style="color:#a6e22e">functionBody</span>);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">new</span> Function(<span style="color:#e6db74">&#39;a&#39;</span>, <span style="color:#e6db74">&#39;b&#39;</span>, <span style="color:#e6db74">&#39;return a + b&#39;</span>); <span style="color:#75715e">// 基础语法
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">new</span> Function(<span style="color:#e6db74">&#39;a,b&#39;</span>, <span style="color:#e6db74">&#39;return a + b&#39;</span>); <span style="color:#75715e">// 逗号分隔
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">new</span> Function(<span style="color:#e6db74">&#39;a , b&#39;</span>, <span style="color:#e6db74">&#39;return a + b&#39;</span>); <span style="color:#75715e">// 逗号和空格分隔
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">计划调用</span>(<span style="color:#a6e22e">setTimeout</span> <span style="color:#a6e22e">和</span> <span style="color:#a6e22e">setInterval</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">setTimeout</span> <span style="color:#a6e22e">允许我们将函数推迟到一段时间间隔之后再执行</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">setInterval</span> <span style="color:#a6e22e">允许我们重复运行一个函数</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">从一段时间间隔之后开始运行</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">之后以该时间间隔连续重复运行该函数</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">任何</span> <span style="color:#a6e22e">setTimeout</span> <span style="color:#a6e22e">都只会在当前代码执行完毕之后才会执行</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">sayHi</span>(<span style="color:#a6e22e">phrase</span>, <span style="color:#a6e22e">who</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">alert</span>( <span style="color:#a6e22e">phrase</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;, &#39;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">who</span> );
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">setTimeout</span> <span style="color:#a6e22e">期望得到一个对函数的引用</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">setTimeout</span>(<span style="color:#a6e22e">sayHi</span>, <span style="color:#ae81ff">1000</span>, <span style="color:#e6db74">&#34;Hello&#34;</span>, <span style="color:#e6db74">&#34;John&#34;</span>); <span style="color:#75715e">// Hello, John
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">setTimeout</span>(() =&gt; <span style="color:#a6e22e">alert</span>(<span style="color:#e6db74">&#39;Hello&#39;</span>), <span style="color:#ae81ff">1000</span>);
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">取消调度的语法</span><span style="color:#960050;background-color:#1e0010">：</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">timerId</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">setTimeout</span>(...);
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">clearTimeout</span>(<span style="color:#a6e22e">timerId</span>);
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">clearInterval</span>(<span style="color:#a6e22e">timerId</span>)<span style="color:#960050;background-color:#1e0010">；</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">使用</span> <span style="color:#a6e22e">setInterval</span> <span style="color:#a6e22e">时</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">func</span> <span style="color:#a6e22e">函数的实际调用间隔要比代码中设定的时间间隔要短</span><span style="color:#960050;background-color:#1e0010">！</span><span style="color:#a6e22e">因为</span> <span style="color:#a6e22e">func</span> <span style="color:#a6e22e">的执行所花费的时间</span><span style="color:#960050;background-color:#1e0010">“</span><span style="color:#a6e22e">消耗</span><span style="color:#960050;background-color:#1e0010">”</span><span style="color:#a6e22e">了一部分间隔时间</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">所以你可以使用嵌套的</span> <span style="color:#a6e22e">setTimeout</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">setTimeout</span>(<span style="color:#66d9ef">function</span> <span style="color:#a6e22e">run</span>() {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">func</span>(<span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">setTimeout</span>(<span style="color:#a6e22e">run</span>, <span style="color:#ae81ff">100</span>);
</span></span><span style="display:flex;"><span>}, <span style="color:#ae81ff">100</span>);
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">这段代码会先输出</span> <span style="color:#960050;background-color:#1e0010">“</span><span style="color:#a6e22e">Hello</span><span style="color:#960050;background-color:#1e0010">”，</span><span style="color:#a6e22e">然后立即输出</span> <span style="color:#960050;background-color:#1e0010">“</span><span style="color:#a6e22e">World</span><span style="color:#960050;background-color:#1e0010">”，</span><span style="color:#a6e22e">这样调度可以让</span> <span style="color:#a6e22e">func</span> <span style="color:#a6e22e">尽快执行</span><span style="color:#960050;background-color:#1e0010">。</span><span style="color:#a6e22e">但是只有在当前正在执行的脚本执行完成后</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">调度程序才会调用它</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">setTimeout</span>(() =&gt; <span style="color:#a6e22e">alert</span>(<span style="color:#e6db74">&#34;World&#34;</span>));
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">alert</span>(<span style="color:#e6db74">&#34;Hello&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">如果我们还希望函数立即运行</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">那么我们可以在单独的一行上添加一个额外的调用</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">printNumbers</span>(<span style="color:#a6e22e">from</span>, <span style="color:#a6e22e">to</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">current</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">from</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">go</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">alert</span>(<span style="color:#a6e22e">current</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">current</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">to</span>) {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">clearInterval</span>(<span style="color:#a6e22e">timerId</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">current</span><span style="color:#f92672">++</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">go</span>();
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">timerId</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">setInterval</span>(<span style="color:#a6e22e">go</span>, <span style="color:#ae81ff">1000</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">printNumbers</span>(<span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">10</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;</span><span style="color:#a6e22e">h1</span><span style="color:#f92672">&gt;</span><span style="color:#a6e22e">箭头函数</span><span style="color:#f92672">&lt;</span><span style="color:#960050;background-color:#1e0010">/h1&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">简洁是箭头函数的作用</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#66d9ef">double</span>(<span style="color:#a6e22e">x</span>) { <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">x</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span>; } 
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#66d9ef">double</span>(<span style="color:#ae81ff">2</span>)) <span style="color:#75715e">// 4
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#66d9ef">double</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">x</span> =&gt; <span style="color:#a6e22e">x</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span>;
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#66d9ef">double</span>(<span style="color:#ae81ff">2</span>)) <span style="color:#75715e">// 4
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">如何简洁</span><span style="color:#960050;background-color:#1e0010">：</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1.</span><span style="color:#a6e22e">隐式返回</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">意味着您不需要再使用return来返回</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#66d9ef">double</span> <span style="color:#f92672">=</span> (<span style="color:#a6e22e">x</span>) =&gt; <span style="color:#a6e22e">x</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span>; <span style="color:#75715e">//x为函数的参数
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">getPerson</span> <span style="color:#f92672">=</span> () =&gt; ({ <span style="color:#a6e22e">name</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;Nick&#34;</span>, <span style="color:#a6e22e">age</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">24</span> })
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2.</span><span style="color:#66d9ef">this</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">这是一个执行上下文引用的关键字</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">既不是指向其依赖函数本身</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">也不是其方法的实例</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">其引用的值随着上下文函数变化而改变</span><span style="color:#960050;background-color:#1e0010">。</span><span style="color:#a6e22e">表面上看就是越过函数域的范围但能引用函数域外的实例并保留函数状态</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">myFunc</span>() {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">myVar</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">setTimeout</span>(
</span></span><span style="display:flex;"><span>    () =&gt; { <span style="color:#75715e">// this taken from surrounding, meaning myFunc here
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>      <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">myVar</span><span style="color:#f92672">++</span>;
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">myVar</span>) <span style="color:#75715e">// 1
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    },
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>  );
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">函数默认参数值</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">myFunc</span>(<span style="color:#a6e22e">x</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">x</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">myFunc</span>()) <span style="color:#75715e">// 10 -- no value is provided so x default value 10 is assigned to x in myFunc
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">myFunc</span>(<span style="color:#ae81ff">5</span>)) <span style="color:#75715e">// 5 -- a value is provided so x is equal to 5 in myFunc
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">解构</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">person</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">firstName</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;Nick&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">lastName</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;Anderson&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">age</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">35</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">sex</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;M&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">arrVar</span> <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#34;sad&#34;</span>,<span style="color:#e6db74">&#34;happy&#34;</span>,,]<span style="color:#960050;background-color:#1e0010">；</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">括号不用于声明对象或块</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">而是对象解构语法</span><span style="color:#960050;background-color:#1e0010">。</span><span style="color:#66d9ef">const</span> { <span style="color:#a6e22e">age</span> } <span style="color:#f92672">=</span> <span style="color:#a6e22e">person</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">joinFirstLastName</span>({ <span style="color:#a6e22e">firstName</span>, <span style="color:#a6e22e">lastName</span> }) { <span style="color:#75715e">// we create firstName and lastName variables by destructuring person parameter
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">firstName</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;-&#39;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">lastName</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">joinFirstLastName</span>(<span style="color:#a6e22e">person</span>); <span style="color:#75715e">// &#34;Nick-Anderson&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">箭头函数一起使用</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">joinFirstLastName</span> <span style="color:#f92672">=</span> ({ <span style="color:#a6e22e">firstName</span>, <span style="color:#a6e22e">lastName</span> }) =&gt; <span style="color:#a6e22e">firstName</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;-&#39;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">lastName</span>;
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">joinFirstLastName</span>(<span style="color:#a6e22e">person</span>); <span style="color:#75715e">// &#34;Nick-Anderson&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">中括号不用于声明对象或块</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">而是数组解构语法</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> [<span style="color:#a6e22e">x</span>, <span style="color:#a6e22e">y</span>] <span style="color:#f92672">=</span> <span style="color:#a6e22e">arrVar</span><span style="color:#960050;background-color:#1e0010">；</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">函数式编程</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">函数式四骑士map</span>,<span style="color:#a6e22e">reudce</span>,<span style="color:#a6e22e">filter</span>,<span style="color:#a6e22e">find</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">numbers</span> <span style="color:#f92672">=</span> [<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">6</span>];
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">doubledNumbers</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">numbers</span>.<span style="color:#a6e22e">map</span>(<span style="color:#a6e22e">n</span> =&gt; <span style="color:#a6e22e">n</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">2</span>); <span style="color:#75715e">// [0, 2, 4, 6, 8, 10, 12]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">evenNumbers</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">numbers</span>.<span style="color:#a6e22e">filter</span>(<span style="color:#a6e22e">n</span> =&gt; <span style="color:#a6e22e">n</span> <span style="color:#f92672">%</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">===</span> <span style="color:#ae81ff">0</span>); <span style="color:#75715e">// [0, 2, 4, 6]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">sum</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">numbers</span>.<span style="color:#a6e22e">reduce</span>((<span style="color:#a6e22e">prev</span>, <span style="color:#a6e22e">next</span>) =&gt; <span style="color:#a6e22e">prev</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">next</span>, <span style="color:#ae81ff">0</span>); <span style="color:#75715e">// 21
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">greaterThanFour</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">numbers</span>.<span style="color:#a6e22e">find</span>((<span style="color:#a6e22e">n</span>) =&gt; <span style="color:#a6e22e">n</span><span style="color:#f92672">&gt;</span><span style="color:#ae81ff">4</span>); <span style="color:#75715e">// 5
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">可变参数</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">与golang十分相似</span><span style="color:#e6db74">&#34;...&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">golang中扩展arr数组使用append</span>(...<span style="color:#a6e22e">arr</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">arr1</span> <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#34;a&#34;</span>, <span style="color:#e6db74">&#34;b&#34;</span>, <span style="color:#e6db74">&#34;c&#34;</span>];
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">arr2</span> <span style="color:#f92672">=</span> [...<span style="color:#a6e22e">arr1</span>, <span style="color:#e6db74">&#34;d&#34;</span>, <span style="color:#e6db74">&#34;e&#34;</span>, <span style="color:#e6db74">&#34;f&#34;</span>]; <span style="color:#75715e">// [&#34;a&#34;, &#34;b&#34;, &#34;c&#34;, &#34;d&#34;, &#34;e&#34;, &#34;f&#34;]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">你仍然可以使用arr</span>.<span style="color:#a6e22e">lenght</span><span style="color:#f92672">/</span><span style="color:#a6e22e">arr</span>.<span style="color:#a6e22e">map</span><span style="color:#f92672">/</span><span style="color:#a6e22e">arr</span>.<span style="color:#a6e22e">reduce</span><span style="color:#f92672">/</span><span style="color:#a6e22e">arr</span>.<span style="color:#a6e22e">find</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">arguments函数参数对象的绑定</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">即参数对象</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">这是一个可变参数和解构的例子</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">myObj</span> <span style="color:#f92672">=</span> { <span style="color:#a6e22e">x</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">1</span>, <span style="color:#a6e22e">y</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">2</span>, <span style="color:#a6e22e">a</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">3</span>, <span style="color:#a6e22e">b</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">4</span> };
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> { <span style="color:#a6e22e">x</span>, <span style="color:#a6e22e">y</span>, ...<span style="color:#a6e22e">z</span> } <span style="color:#f92672">=</span> <span style="color:#a6e22e">myObj</span>; <span style="color:#75715e">// object destructuring here
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">x</span>); <span style="color:#75715e">// 1
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">y</span>); <span style="color:#75715e">// 2
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">z</span>); <span style="color:#75715e">// { a: 3, b: 4 }
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// z is the rest of the object destructured: myObj object minus x and y properties destructured
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">n</span> <span style="color:#f92672">=</span> { <span style="color:#a6e22e">x</span>, <span style="color:#a6e22e">y</span>, ...<span style="color:#a6e22e">z</span> };
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">n</span>); <span style="color:#75715e">// { x: 1, y: 2, a: 3, b: 4 }
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">语法糖</span><span style="color:#960050;background-color:#1e0010">：</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">x</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">y</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">20</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">myObj</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">x</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">x</span>, <span style="color:#75715e">// assigning x variable value to myObj.x
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#a6e22e">y</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">y</span> <span style="color:#75715e">// assigning y variable value to myObj.y
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">myObj</span>.<span style="color:#a6e22e">x</span>) <span style="color:#75715e">// 10
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">myObj</span>.<span style="color:#a6e22e">y</span>) <span style="color:#75715e">// 20
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">x</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">10</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">y</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">20</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">myObj</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">x</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">y</span>
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">myObj</span>.<span style="color:#a6e22e">x</span>) <span style="color:#75715e">// 10
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">myObj</span>.<span style="color:#a6e22e">y</span>) <span style="color:#75715e">// 20
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">异步</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">模板文本</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">你可以在主流的后端语言中看到这个特新</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">name</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Nick&#34;</span>;
</span></span><span style="display:flex;"><span><span style="color:#e6db74">`Hello </span><span style="color:#e6db74">${</span><span style="color:#a6e22e">name</span><span style="color:#e6db74">}</span><span style="color:#e6db74">, the following expression is equal to four : </span><span style="color:#e6db74">${</span><span style="color:#ae81ff">2</span><span style="color:#f92672">+</span><span style="color:#ae81ff">2</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">comma</span>(<span style="color:#a6e22e">strings</span>, ...<span style="color:#a6e22e">values</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">strings</span>.<span style="color:#a6e22e">reduce</span>((<span style="color:#a6e22e">prev</span>, <span style="color:#a6e22e">next</span>) =&gt; {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">value</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">values</span>.<span style="color:#a6e22e">shift</span>() <span style="color:#f92672">||</span> [];
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">value</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">value</span>.<span style="color:#a6e22e">join</span>(<span style="color:#e6db74">&#34;, &#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">prev</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">next</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">value</span>;
</span></span><span style="display:flex;"><span>  }, <span style="color:#e6db74">&#34;&#34;</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">snacks</span> <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;apples&#39;</span>, <span style="color:#e6db74">&#39;bananas&#39;</span>, <span style="color:#e6db74">&#39;cherries&#39;</span>];
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">comma</span><span style="color:#e6db74">`I like </span><span style="color:#e6db74">${</span><span style="color:#a6e22e">snacks</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> to snack on.`</span>;
</span></span><span style="display:flex;"><span><span style="color:#75715e">// &#34;I like apples, bananas, cherries to snack on.&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">导包</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">你可以在java中看到为了省略system</span>.<span style="color:#a6e22e">out的例子</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// myFile.js
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">import</span> { <span style="color:#a6e22e">pi</span>, <span style="color:#a6e22e">exp</span> } <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;./mathConstants.js&#39;</span>; <span style="color:#75715e">// Named import -- destructuring-like syntax
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">pi</span>) <span style="color:#75715e">// 3.14
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">exp</span>) <span style="color:#75715e">// 2.7
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">关于默认导出</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">每个模块只有一个默认导出</span><span style="color:#960050;background-color:#1e0010">。</span><span style="color:#a6e22e">默认导出可以是函数</span><span style="color:#960050;background-color:#1e0010">、</span><span style="color:#a6e22e">类</span><span style="color:#960050;background-color:#1e0010">、</span><span style="color:#a6e22e">对象或其他任何内容</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">export</span> <span style="color:#66d9ef">default</span> <span style="color:#a6e22e">ultimateNumber</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">export</span> <span style="color:#66d9ef">default</span> <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">sum</span>(<span style="color:#a6e22e">x</span>, <span style="color:#a6e22e">y</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">x</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">y</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">async</span><span style="color:#f92672">/</span><span style="color:#66d9ef">await</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">虽然其与golang差了一个a</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">但有一点是一样</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">await会阻止该行的执行</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">在golang中使用await会使主协程发生阻塞</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">直到golang协程都挂起</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">downToOne</span>(<span style="color:#a6e22e">n</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">list</span> <span style="color:#f92672">=</span> [];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">n</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>; <span style="color:#f92672">--</span><span style="color:#a6e22e">i</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">list</span>.<span style="color:#a6e22e">push</span>(<span style="color:#a6e22e">i</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">list</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">downToOne</span>(<span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">//=&gt; [ 5, 4, 3, 2, 1 ]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">product</span>(<span style="color:#a6e22e">list</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">product</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">n</span> <span style="color:#66d9ef">of</span> <span style="color:#a6e22e">list</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">product</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">product</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">n</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">product</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">product</span>(<span style="color:#a6e22e">downToOne</span>(<span style="color:#ae81ff">5</span>)) <span style="color:#75715e">// 120
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">yield</span> <span style="color:#a6e22e">next</span>().<span style="color:#a6e22e">value执行句块并返回</span> <span style="color:#66d9ef">function</span>{<span style="color:#66d9ef">return</span>}
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Yield Example
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">function</span> <span style="color:#f92672">*</span> <span style="color:#a6e22e">idMaker</span>() {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">index</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">while</span> (<span style="color:#a6e22e">index</span> <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">2</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">yield</span> <span style="color:#a6e22e">index</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">index</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">index</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">gen</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">idMaker</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">gen</span>.<span style="color:#a6e22e">next</span>().<span style="color:#a6e22e">value</span>; <span style="color:#75715e">// 0
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">gen</span>.<span style="color:#a6e22e">next</span>().<span style="color:#a6e22e">value</span>; <span style="color:#75715e">// 1
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">gen</span>.<span style="color:#a6e22e">next</span>().<span style="color:#a6e22e">value</span>; <span style="color:#75715e">// undefined
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Generator Return Example
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">function</span><span style="color:#f92672">*</span> <span style="color:#a6e22e">yieldAndReturn</span>() {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">yield</span> <span style="color:#e6db74">&#34;Y&#34;</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;R&#34;</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">yield</span> <span style="color:#e6db74">&#34;unreachable&#34;</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">gen</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">yieldAndReturn</span>()
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">gen</span>.<span style="color:#a6e22e">next</span>(); <span style="color:#75715e">// { value: &#34;Y&#34;, done: false }
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">gen</span>.<span style="color:#a6e22e">next</span>(); <span style="color:#75715e">// { value: &#34;R&#34;, done: true }
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">gen</span>.<span style="color:#a6e22e">next</span>(); <span style="color:#75715e">// { value: undefined, done: true }
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">原型</span><span style="color:#960050;background-color:#1e0010">：</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">对象的特征</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">因该是就是变量属于该类型就能调用该方法无需定义方法</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">析构等号右侧可以是任何可迭代对象</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> [<span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span>, <span style="color:#a6e22e">c</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;abc&#34;</span>; <span style="color:#75715e">// [&#34;a&#34;, &#34;b&#34;, &#34;c&#34;]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">let</span> [<span style="color:#a6e22e">one</span>, <span style="color:#a6e22e">two</span>, <span style="color:#a6e22e">three</span>] <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Set</span>([<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>]);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> {<span style="color:#a6e22e">width</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">w</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">100</span>, <span style="color:#a6e22e">height</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">h</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">200</span>, <span style="color:#a6e22e">title</span>} <span style="color:#f92672">=</span> <span style="color:#a6e22e">options</span>;
</span></span><span style="display:flex;"><span>({<span style="color:#a6e22e">title</span>, <span style="color:#a6e22e">width</span>, <span style="color:#a6e22e">height</span>} <span style="color:#f92672">=</span> {<span style="color:#a6e22e">title</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;Menu&#34;</span>, <span style="color:#a6e22e">width</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">200</span>, <span style="color:#a6e22e">height</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">100</span>});
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">日期类型</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">new</span> Date(<span style="color:#ae81ff">2011</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>); <span style="color:#75715e">// 1 Jan 2011, 00:00:00
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">new</span> Date(<span style="color:#ae81ff">2011</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>); <span style="color:#75715e">// 同样，时分秒等均为默认值 0
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">超出范围的日期组件将会被自动分配</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">date</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Date(<span style="color:#ae81ff">2013</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">32</span>); <span style="color:#75715e">// 32 Jan 2013 ?!?
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">alert</span>(<span style="color:#a6e22e">date</span>); <span style="color:#75715e">// ……是 1st Feb 2013!
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>Date.<span style="color:#a6e22e">now</span>()<span style="color:#960050;background-color:#1e0010">，</span><span style="color:#75715e">//返回当前的时间戳
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>Date.<span style="color:#a6e22e">parse</span>(<span style="color:#a6e22e">str</span>) <span style="color:#75715e">//方法可以从一个字符串中读取日期。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//日期可以相减，得到的是以毫秒表示的两者的差值。JavaScript 中时间戳以毫秒为单位
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">json</span><span style="color:#960050;background-color:#1e0010">：</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">stringify</span> <span style="color:#a6e22e">将对象转换为</span> <span style="color:#a6e22e">JSON</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">JSON</span>.<span style="color:#a6e22e">parse</span> <span style="color:#a6e22e">将</span> <span style="color:#a6e22e">JSON</span> <span style="color:#a6e22e">转换回对象</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span></code></pre></div>]]></content>
        </item>
        
        <item>
            <title></title>
            <link>https://MoeSinon.github.io/blog/posts/uslword/</link>
            <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
            
            <guid>https://MoeSinon.github.io/blog/posts/uslword/</guid>
            <description>常用的javascript关键词
数据相关的: toString() toFixed()//将数字舍入到小数点后 n 位，并以字符串形式返回结果 alert( 6.35.toFixed(1) ); // 6.3 //由于精度问题你可以先使用round缩减至1个精度再扩大精度 alert( num.toString(2) ); // 11111111 其值大小最小2进制最大36进制 isNaN(value)//值 “NaN” 是独一无二的，它不等于任何东西，包括它自身,该函数会先转换成数然后再比较是否为0 Object.is(NaN，NaN)//类似于===但可以比较NaN isFinite(value) parseInt()//和+号区别就是只要按顺序读字符串只要不是非字符串就能转换，+就严格许多 parseFloat() 一般小数基本会出现精度损失 Math.floor Math.ceil Math.round Math.trunc &amp;lt;h1&amp;gt;字符串相关&amp;lt;/h1&amp;gt; //反引号允许我们通过 ${…} 将任何表达式嵌入到字符串中 .length str.charAt() //获取在位置的一个字符,可以使用 for..of 遍历字符 str.indexOf(substr, pos)//给定位置 pos 开始，在 str 中查找 substr //JavaScript 中有三种获取字符串的方法：substring、substr 和 slice alert( &amp;#39;Interface&amp;#39;.toUpperCase() ); // INTERFACE alert( &amp;#39;Interface&amp;#39;.toLowerCase() ); // interface indexOf()//如果没有找到，则返回 -1，否则返回匹配成功的位置 (~str.indexOf(...))//对于 32-bit 整数，~n 等于 -(n+1)，所以你可以这么用if str.includes(substr, pos) 还有 startsWith，endsWith//根据 str 中是否包含 substr 来返回 true/false slice(start, end)//从 start 到 end（不含 end）允许负值,足够用 小写字母总是大于大写字母，可以使用str.</description>
            <content type="html"><![CDATA[<p>常用的javascript关键词</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-javascript" data-lang="javascript"><span style="display:flex;"><span><span style="color:#a6e22e">数据相关的</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">toString</span>()
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">toFixed</span>()<span style="color:#75715e">//将数字舍入到小数点后 n 位，并以字符串形式返回结果
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">alert</span>( <span style="color:#ae81ff">6.35</span>.<span style="color:#a6e22e">toFixed</span>(<span style="color:#ae81ff">1</span>) ); <span style="color:#75715e">// 6.3
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//由于精度问题你可以先使用round缩减至1个精度再扩大精度
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">alert</span>( <span style="color:#a6e22e">num</span>.<span style="color:#a6e22e">toString</span>(<span style="color:#ae81ff">2</span>) );   <span style="color:#75715e">// 11111111
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">其值大小最小2进制最大36进制</span>
</span></span><span style="display:flex;"><span>isNaN(<span style="color:#a6e22e">value</span>)<span style="color:#75715e">//值 “NaN” 是独一无二的，它不等于任何东西，包括它自身,该函数会先转换成数然后再比较是否为0
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>Object.<span style="color:#a6e22e">is</span>(<span style="color:#66d9ef">NaN</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#66d9ef">NaN</span>)<span style="color:#75715e">//类似于===但可以比较NaN
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>isFinite(<span style="color:#a6e22e">value</span>)
</span></span><span style="display:flex;"><span>parseInt()<span style="color:#75715e">//和+号区别就是只要按顺序读字符串只要不是非字符串就能转换，+就严格许多
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>parseFloat()
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">一般小数基本会出现精度损失</span>
</span></span><span style="display:flex;"><span>Math.<span style="color:#a6e22e">floor</span>
</span></span><span style="display:flex;"><span>Math.<span style="color:#a6e22e">ceil</span>
</span></span><span style="display:flex;"><span>Math.<span style="color:#a6e22e">round</span>
</span></span><span style="display:flex;"><span>Math.<span style="color:#a6e22e">trunc</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;</span><span style="color:#a6e22e">h1</span><span style="color:#f92672">&gt;</span><span style="color:#a6e22e">字符串相关</span><span style="color:#f92672">&lt;</span><span style="color:#960050;background-color:#1e0010">/h1&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">//反引号允许我们通过 ${…} 将任何表达式嵌入到字符串中
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>.<span style="color:#a6e22e">length</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">str</span>.<span style="color:#a6e22e">charAt</span>() <span style="color:#75715e">//获取在位置的一个字符,可以使用 for..of 遍历字符
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">str</span>.<span style="color:#a6e22e">indexOf</span>(<span style="color:#a6e22e">substr</span>, <span style="color:#a6e22e">pos</span>)<span style="color:#75715e">//给定位置 pos 开始，在 str 中查找 substr
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//JavaScript 中有三种获取字符串的方法：substring、substr 和 slice
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">alert</span>( <span style="color:#e6db74">&#39;Interface&#39;</span>.<span style="color:#a6e22e">toUpperCase</span>() ); <span style="color:#75715e">// INTERFACE
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">alert</span>( <span style="color:#e6db74">&#39;Interface&#39;</span>.<span style="color:#a6e22e">toLowerCase</span>() ); <span style="color:#75715e">// interface
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">indexOf</span>()<span style="color:#75715e">//如果没有找到，则返回 -1，否则返回匹配成功的位置
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>(<span style="color:#f92672">~</span><span style="color:#a6e22e">str</span>.<span style="color:#a6e22e">indexOf</span>(...))<span style="color:#75715e">//对于 32-bit 整数，~n 等于 -(n+1)，所以你可以这么用if 
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">str</span>.<span style="color:#a6e22e">includes</span>(<span style="color:#a6e22e">substr</span>, <span style="color:#a6e22e">pos</span>) <span style="color:#a6e22e">还有</span> <span style="color:#a6e22e">startsWith</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">endsWith</span><span style="color:#75715e">//根据 str 中是否包含 substr 来返回 true/false
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">slice</span>(<span style="color:#a6e22e">start</span>, <span style="color:#a6e22e">end</span>)<span style="color:#75715e">//从 start 到 end（不含 end）允许负值,足够用
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">小写字母总是大于大写字母</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">可以使用str</span>.<span style="color:#a6e22e">codePointAt</span>(<span style="color:#a6e22e">pos</span>)<span style="color:#a6e22e">返回在</span> <span style="color:#a6e22e">pos</span> <span style="color:#a6e22e">位置的字符代码</span> 
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">alert</span>( <span style="color:#e6db74">&#39;Österreich&#39;</span>.<span style="color:#a6e22e">localeCompare</span>(<span style="color:#e6db74">&#39;Zealand&#39;</span>) ); <span style="color:#75715e">// -1
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">获取字符时</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">使用</span> []
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">str</span>.<span style="color:#a6e22e">trim</span>() <span style="color:#960050;background-color:#1e0010">——</span> <span style="color:#a6e22e">删除字符串前后的空格</span> (<span style="color:#960050;background-color:#1e0010">“</span><span style="color:#a6e22e">trims</span><span style="color:#960050;background-color:#1e0010">”</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">str</span>.<span style="color:#a6e22e">repeat</span>(<span style="color:#a6e22e">n</span>) <span style="color:#960050;background-color:#1e0010">——</span> <span style="color:#a6e22e">重复字符串</span> <span style="color:#a6e22e">n</span> <span style="color:#a6e22e">次</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">数组</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">在golang中数组是值</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">切片或许和javascript数组最类似</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">fruits</span> <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#34;Apple&#34;</span>, <span style="color:#e6db74">&#34;Orange&#34;</span>, <span style="color:#e6db74">&#34;Plum&#34;</span>];
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">arr</span>.<span style="color:#a6e22e">at</span>(<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#75715e">//参数可为负值
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">push</span> <span style="color:#75715e">//在末端添加一个元素.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">shift</span> <span style="color:#75715e">//取出队列首端的一个元素，整个队列往前移，这样原先排第二的元素现在排在了第一。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">push</span> <span style="color:#75715e">//在末端添加一个元素.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">pop</span> <span style="color:#75715e">//从末端取出一个元素.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">unshift</span><span style="color:#75715e">//在数组的首端添加元素
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">请不要</span><span style="color:#960050;background-color:#1e0010">：</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">添加一个非数字的属性</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">比如</span> <span style="color:#a6e22e">arr</span>.<span style="color:#a6e22e">test</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">制造空洞</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">比如</span><span style="color:#960050;background-color:#1e0010">：</span><span style="color:#a6e22e">添加</span> <span style="color:#a6e22e">arr</span>[<span style="color:#ae81ff">0</span>]<span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">然后添加</span> <span style="color:#a6e22e">arr</span>[<span style="color:#ae81ff">1000</span>] (<span style="color:#a6e22e">它们中间什么都没有</span>)<span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">以倒序填充数组</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">比如</span> <span style="color:#a6e22e">arr</span>[<span style="color:#ae81ff">1000</span>]<span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">arr</span>[<span style="color:#ae81ff">999</span>] <span style="color:#a6e22e">等等</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">这会破坏数组的有序储存结构</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span>..<span style="color:#66d9ef">in</span> <span style="color:#a6e22e">循环适用于普通对象</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">并且做了对应的优化</span><span style="color:#960050;background-color:#1e0010">。</span><span style="color:#a6e22e">用于数组速度要慢</span> <span style="color:#ae81ff">10</span><span style="color:#f92672">-</span><span style="color:#ae81ff">100</span> <span style="color:#a6e22e">倍</span><span style="color:#960050;background-color:#1e0010">。</span><span style="color:#a6e22e">当然即使是这样也依然非常快</span><span style="color:#960050;background-color:#1e0010">。</span><span style="color:#a6e22e">只有在遇到瓶颈时可能会有问题</span><span style="color:#960050;background-color:#1e0010">。</span><span style="color:#a6e22e">但是我们仍然应该了解这其中的不同</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">arr</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>; <span style="color:#75715e">// 截断到只剩 2 个元素
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">alert</span>( <span style="color:#a6e22e">arr</span> ); <span style="color:#75715e">// [1, 2]
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">arr</span>.<span style="color:#a6e22e">length</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>; <span style="color:#75715e">// 又把 length 加回来
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">alert</span>( <span style="color:#a6e22e">arr</span>[<span style="color:#ae81ff">3</span>] ); <span style="color:#75715e">// undefined：被截断的那些数值并没有回来
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">如果使用</span> <span style="color:#f92672">==</span> <span style="color:#a6e22e">来比较数组</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">除非我们比较的是两个引用同一数组的变量</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">否则它们永远不相等</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">对象相关</span>
</span></span><span style="display:flex;"><span>Object.<span style="color:#a6e22e">keys</span>(<span style="color:#a6e22e">obj</span>) <span style="color:#960050;background-color:#1e0010">——</span> <span style="color:#a6e22e">返回一个包含该对象所有的键的数组</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span>Object.<span style="color:#a6e22e">values</span>(<span style="color:#a6e22e">obj</span>) <span style="color:#960050;background-color:#1e0010">——</span> <span style="color:#a6e22e">返回一个包含该对象所有的值的数组</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span>Object.<span style="color:#a6e22e">entries</span>(<span style="color:#a6e22e">obj</span>) <span style="color:#960050;background-color:#1e0010">——</span> <span style="color:#a6e22e">返回一个包含该对象所有</span> [<span style="color:#a6e22e">key</span>, <span style="color:#a6e22e">value</span>] <span style="color:#a6e22e">键值对的数组</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">字符串类型</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">symbol类型可以用作对象属性键</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">其他不行</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">symbol</span>() <span style="color:#75715e">//保证是唯一的。即使我们创建了许多具有相同描述的 symbol，它们的值也是不同。描述只是一个标签
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">user</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">name</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;John&#34;</span>,
</span></span><span style="display:flex;"><span>  [<span style="color:#a6e22e">Symbol</span>(<span style="color:#e6db74">&#34;id&#34;</span>)]<span style="color:#f92672">:</span> <span style="color:#ae81ff">123</span> <span style="color:#75715e">// 要在对象字面量 {...} 中使用 symbol，则需要使用方括号把它括起来
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>};
</span></span><span style="display:flex;"><span>Object.<span style="color:#a6e22e">keys</span>(<span style="color:#a6e22e">user</span>) <span style="color:#a6e22e">会忽略symbol值</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">但Object</span>.<span style="color:#a6e22e">assign</span> <span style="color:#a6e22e">会同时复制字符串和</span> <span style="color:#a6e22e">symbol</span> <span style="color:#a6e22e">属性</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">要从全局symbol注册表中读取</span><span style="color:#960050;background-color:#1e0010">（</span><span style="color:#a6e22e">不存在则创建</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">请使用</span> <span style="color:#a6e22e">Symbol</span>.<span style="color:#66d9ef">for</span>(<span style="color:#a6e22e">key</span>)<span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">Symbol</span>.<span style="color:#a6e22e">keyFor</span>(<span style="color:#a6e22e">sym</span>)
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 通过 name 获取 symbol
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">sym</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Symbol</span>.<span style="color:#66d9ef">for</span>(<span style="color:#e6db74">&#34;name&#34;</span>);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">sym2</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Symbol</span>.<span style="color:#66d9ef">for</span>(<span style="color:#e6db74">&#34;id&#34;</span>);
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 通过 symbol 获取 name
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">alert</span>( <span style="color:#a6e22e">Symbol</span>.<span style="color:#a6e22e">keyFor</span>(<span style="color:#a6e22e">sym</span>) ); <span style="color:#75715e">// name
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">alert</span>( <span style="color:#a6e22e">Symbol</span>.<span style="color:#a6e22e">keyFor</span>(<span style="color:#a6e22e">sym2</span>) ); <span style="color:#75715e">// id
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>Array.<span style="color:#a6e22e">from</span>()<span style="color:#a6e22e">接受一个可迭代或类数组的值</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">并从中获取一个</span><span style="color:#960050;background-color:#1e0010">“</span><span style="color:#a6e22e">真正的</span><span style="color:#960050;background-color:#1e0010">”</span><span style="color:#a6e22e">数组</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">在这里要提一嘴类数组</span> 
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">arrayLike</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">0</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;Hello&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">1</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;World&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">length</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span><span style="color:#75715e">//是的，这不是对象，也不是数组
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">arr</span> <span style="color:#f92672">=</span> Array.<span style="color:#a6e22e">from</span>(<span style="color:#a6e22e">arrayLike</span>); <span style="color:#75715e">// 转换成可迭代数组
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">还有使用展开运算符</span><span style="color:#960050;background-color:#1e0010">“</span>...<span style="color:#960050;background-color:#1e0010">”</span><span style="color:#a6e22e">也可以将可迭代对象转换为真正的数组</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">str</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;𝒳😂&#34;</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">chars</span> <span style="color:#f92672">=</span> [...<span style="color:#a6e22e">str</span>];
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">原始值转换相当于可自定义对象转换规则</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">Symbol</span>.<span style="color:#a6e22e">toPrimitive</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">toString</span><span style="color:#f92672">/</span><span style="color:#a6e22e">valueOf</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">user</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">name</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;John&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">money</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">1000</span>,
</span></span><span style="display:flex;"><span>  [<span style="color:#a6e22e">Symbol</span>.<span style="color:#a6e22e">toPrimitive</span>](<span style="color:#a6e22e">hint</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">alert</span>(<span style="color:#e6db74">`hint: </span><span style="color:#e6db74">${</span><span style="color:#a6e22e">hint</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">hint</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;string&#34;</span> <span style="color:#f92672">?</span> <span style="color:#e6db74">`{name: &#34;</span><span style="color:#e6db74">${</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">name</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;}`</span> <span style="color:#f92672">:</span> <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">money</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 转换演示：
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">alert</span>(<span style="color:#a6e22e">user</span>); <span style="color:#75715e">// hint: string -&gt; {name: &#34;John&#34;}
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">alert</span>(<span style="color:#f92672">+</span><span style="color:#a6e22e">user</span>); <span style="color:#75715e">// hint: number -&gt; 1000
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">alert</span>(<span style="color:#a6e22e">user</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">500</span>); <span style="color:#75715e">// hint: default -&gt; 1500
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">MAP</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">集合</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">Map</span> <span style="color:#a6e22e">使用</span> <span style="color:#a6e22e">SameValueZero</span> <span style="color:#a6e22e">算法来比较键是否相等</span><span style="color:#960050;background-color:#1e0010">。</span><span style="color:#a6e22e">它和严格等于</span> <span style="color:#f92672">===</span> <span style="color:#a6e22e">差不多</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">但区别是</span> <span style="color:#66d9ef">NaN</span> <span style="color:#a6e22e">被看成是等于</span> <span style="color:#66d9ef">NaN</span><span style="color:#960050;background-color:#1e0010">。</span><span style="color:#a6e22e">所以</span> <span style="color:#66d9ef">NaN</span> <span style="color:#a6e22e">也可以被用作键</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Map</span>() <span style="color:#960050;background-color:#1e0010">——</span> <span style="color:#a6e22e">创建</span> <span style="color:#a6e22e">map</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">map</span>.<span style="color:#a6e22e">set</span>(<span style="color:#a6e22e">key</span>, <span style="color:#a6e22e">value</span>) <span style="color:#960050;background-color:#1e0010">——</span> <span style="color:#a6e22e">根据键存储值</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">map</span>.<span style="color:#a6e22e">get</span>(<span style="color:#a6e22e">key</span>) <span style="color:#960050;background-color:#1e0010">——</span> <span style="color:#a6e22e">根据键来返回值</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">如果</span> <span style="color:#a6e22e">map</span> <span style="color:#a6e22e">中不存在对应的</span> <span style="color:#a6e22e">key</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">则返回</span> <span style="color:#66d9ef">undefined</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">map</span>.<span style="color:#a6e22e">has</span>(<span style="color:#a6e22e">key</span>) <span style="color:#960050;background-color:#1e0010">——</span> <span style="color:#a6e22e">如果</span> <span style="color:#a6e22e">key</span> <span style="color:#a6e22e">存在则返回</span> <span style="color:#66d9ef">true</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">否则返回</span> <span style="color:#66d9ef">false</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">map</span>.<span style="color:#66d9ef">delete</span>(<span style="color:#a6e22e">key</span>) <span style="color:#960050;background-color:#1e0010">——</span> <span style="color:#a6e22e">删除指定键的值</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">map</span>.<span style="color:#a6e22e">clear</span>() <span style="color:#960050;background-color:#1e0010">——</span> <span style="color:#a6e22e">清空</span> <span style="color:#a6e22e">map</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">map</span>.<span style="color:#a6e22e">size</span> <span style="color:#960050;background-color:#1e0010">——</span> <span style="color:#a6e22e">返回当前元素个数</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">map</span>.<span style="color:#a6e22e">keys</span>() <span style="color:#960050;background-color:#1e0010">——</span> <span style="color:#a6e22e">遍历并返回一个包含所有键的可迭代对象</span><span style="color:#960050;background-color:#1e0010">，</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">map</span>.<span style="color:#a6e22e">values</span>() <span style="color:#960050;background-color:#1e0010">——</span> <span style="color:#a6e22e">遍历并返回一个包含所有值的可迭代对象</span><span style="color:#960050;background-color:#1e0010">，</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">map</span>.<span style="color:#a6e22e">entries</span>() <span style="color:#960050;background-color:#1e0010">——</span> <span style="color:#a6e22e">遍历并返回一个包含所有实体</span> [<span style="color:#a6e22e">key</span>, <span style="color:#a6e22e">value</span>] <span style="color:#a6e22e">的可迭代对象</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#66d9ef">for</span>..<span style="color:#66d9ef">of</span> <span style="color:#a6e22e">在默认情况下使用的就是这个</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">从一个已有的普通对象</span><span style="color:#960050;background-color:#1e0010">（</span><span style="color:#a6e22e">plain</span> <span style="color:#a6e22e">object</span><span style="color:#960050;background-color:#1e0010">）</span><span style="color:#a6e22e">来创建一个</span> <span style="color:#a6e22e">Map</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">obj</span> <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">name</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;John&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">age</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">30</span>
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">map</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Map</span>(Object.<span style="color:#a6e22e">entries</span>(<span style="color:#a6e22e">obj</span>));
</span></span><span style="display:flex;"><span>Object.<span style="color:#a6e22e">fromEntries</span> <span style="color:#a6e22e">方法的作用是相反的</span><span style="color:#960050;background-color:#1e0010">：</span><span style="color:#a6e22e">给定一个具有</span> [<span style="color:#a6e22e">key</span>, <span style="color:#a6e22e">value</span>] <span style="color:#a6e22e">键值对的数组</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">它会根据给定数组创建一个对象</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">WeakMap</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">WeakSet也与之类似</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">weakMap</span>.<span style="color:#a6e22e">get</span>(<span style="color:#a6e22e">key</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">weakMap</span>.<span style="color:#a6e22e">set</span>(<span style="color:#a6e22e">key</span>, <span style="color:#a6e22e">value</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">weakMap</span>.<span style="color:#66d9ef">delete</span>(<span style="color:#a6e22e">key</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">weakMap</span>.<span style="color:#a6e22e">has</span>(<span style="color:#a6e22e">key</span>)
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">用</span> <span style="color:#a6e22e">WeakMap</span> <span style="color:#a6e22e">替代</span> <span style="color:#a6e22e">Map</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">当对象被垃圾回收时</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">对应缓存在WeakMap的键值对也会自动从内存中清除</span><span style="color:#960050;background-color:#1e0010">。</span><span style="color:#a6e22e">适用于键中变更频繁的对象</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">SET</span> <span style="color:#960050;background-color:#1e0010">“</span><span style="color:#a6e22e">值的集合</span><span style="color:#960050;background-color:#1e0010">”（</span><span style="color:#a6e22e">没有键</span><span style="color:#960050;background-color:#1e0010">）</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Set</span>(<span style="color:#a6e22e">iterable</span>) <span style="color:#960050;background-color:#1e0010">——</span> <span style="color:#a6e22e">创建一个</span> <span style="color:#a6e22e">set</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">如果提供了一个</span> <span style="color:#a6e22e">iterable</span> <span style="color:#a6e22e">对象</span><span style="color:#960050;background-color:#1e0010">（</span><span style="color:#a6e22e">通常是数组</span><span style="color:#960050;background-color:#1e0010">），</span><span style="color:#a6e22e">将会从数组里面复制值到</span> <span style="color:#a6e22e">set</span> <span style="color:#a6e22e">中</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">set</span>.<span style="color:#a6e22e">add</span>(<span style="color:#a6e22e">value</span>) <span style="color:#960050;background-color:#1e0010">——</span> <span style="color:#a6e22e">添加一个值</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">返回</span> <span style="color:#a6e22e">set</span> <span style="color:#a6e22e">本身</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">set</span>.<span style="color:#66d9ef">delete</span>(<span style="color:#a6e22e">value</span>) <span style="color:#960050;background-color:#1e0010">——</span> <span style="color:#a6e22e">删除值</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">如果</span> <span style="color:#a6e22e">value</span> <span style="color:#a6e22e">在这个方法调用的时候存在则返回</span> <span style="color:#66d9ef">true</span> <span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">否则返回</span> <span style="color:#66d9ef">false</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">set</span>.<span style="color:#a6e22e">has</span>(<span style="color:#a6e22e">value</span>) <span style="color:#960050;background-color:#1e0010">——</span> <span style="color:#a6e22e">如果</span> <span style="color:#a6e22e">value</span> <span style="color:#a6e22e">在</span> <span style="color:#a6e22e">set</span> <span style="color:#a6e22e">中</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">返回</span> <span style="color:#66d9ef">true</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">否则返回</span> <span style="color:#66d9ef">false</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">set</span>.<span style="color:#a6e22e">clear</span>() <span style="color:#960050;background-color:#1e0010">——</span> <span style="color:#a6e22e">清空</span> <span style="color:#a6e22e">set</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">set</span>.<span style="color:#a6e22e">size</span> <span style="color:#960050;background-color:#1e0010">——</span> <span style="color:#a6e22e">返回元素个数</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">垃圾回收</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">JavaScript</span> <span style="color:#a6e22e">引擎在值</span><span style="color:#960050;background-color:#1e0010">“</span><span style="color:#a6e22e">可达</span><span style="color:#960050;background-color:#1e0010">”</span><span style="color:#a6e22e">和可能被使用时会将其保持在内存中</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">通常</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">当对象</span><span style="color:#960050;background-color:#1e0010">、</span><span style="color:#a6e22e">数组之类的数据结构在内存中时</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">它们的子元素</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">如对象的属性</span><span style="color:#960050;background-color:#1e0010">、</span><span style="color:#a6e22e">数组的元素都被认为是可达的</span><span style="color:#960050;background-color:#1e0010">。</span><span style="color:#a6e22e">例如</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">如果把一个对象放入到数组中</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">那么只要这个数组存在</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">那么这个对象也就存在</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">即使没有其他对该对象的引用</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">与golang相同当你将引用</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">或者内存共享的值</span><span style="color:#960050;background-color:#1e0010">：</span><span style="color:#a6e22e">比如slice中的值删除除非你将其置为nil</span><span style="color:#960050;background-color:#1e0010">，</span><span style="color:#a6e22e">否则垃圾回收器不会回收</span><span style="color:#960050;background-color:#1e0010">。</span>
</span></span></code></pre></div>]]></content>
        </item>
        
    </channel>
</rss>
